# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage
from duckduckgo_search import DDGS
import traceback
import re # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç OPENROUTER_API_KEY –¥–æ–±–∞–≤–ª–µ–Ω –≤ Streamlit Cloud
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v9" # –ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"
MAX_SEARCH_RESULTS_PER_QUERY = 2 # –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
MAX_QUERIES_TO_GENERATE = 3 # –ú–∞–∫—Å. –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–£–º–Ω—ã–π –ß–∞—Ç –ò–ò", # –ò–∑–º–µ–Ω–µ–Ω–æ
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
custom_css = f"""
<style>
    /* ... (–≤–∞—à CSS –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */
     .main .block-container {{ padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem; }}
    [data-testid="stChatMessage"] {{ background: none !important; border: none !important; box-shadow: none !important; padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important; }}
    [data-testid="stChatMessage"] > div {{ gap: 0.75rem; }}
    [data-testid="stChatMessage"] .stChatMessageContent {{ padding: 0 !important; }}
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
                for chat_name, history in data["chats"].items():
                    if not isinstance(history, list):
                         data["chats"][chat_name] = [] # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ —Å–ø–∏—Å–æ–∫
                    else:
                         # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                         data["chats"][chat_name] = [msg for msg in history if isinstance(msg, dict) and "role" in msg and "content" in msg and msg["content"]]
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
                if data["active_chat"] not in data["chats"]:
                     data["active_chat"] = list(data["chats"].keys())[0] if data["chats"] else None

                if data["active_chat"] is None: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–∞—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
                    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"
                    default_chats = {first_chat_name: []}
                    return default_chats, first_chat_name

                return data["chats"], data["active_chat"]
        except Exception as e: # –õ–æ–≤–∏–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏/–ø–∞—Ä—Å–∏–Ω–≥–∞
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}. –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º.")
            pass # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏–∂–µ
    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"
    default_chats = {first_chat_name: []}
    return default_chats, first_chat_name

def save_all_chats(chats_dict, active_chat_name):
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        cleaned_chats = {}
        for name, history in chats_dict.items():
            if isinstance(history, list):
                 cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and "role" in msg and "content" in msg and msg["content"]]
            else:
                 cleaned_chats[name] = [] # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫

        if active_chat_name not in cleaned_chats:
             active_chat_name = list(cleaned_chats.keys())[0] if cleaned_chats else None

        if active_chat_name is None: return False # –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å

        data_to_save = {"chats": cleaned_chats, "active_chat": active_chat_name}
        try:
            localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞: {e}") # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return False
    return False

def generate_new_chat_name(existing_names):
    i = 1
    while f"{DEFAULT_CHAT_NAME} {i}" in existing_names: i += 1
    return f"{DEFAULT_CHAT_NAME} {i}"

# --- –ù–û–í–ê–Ø –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
def generate_search_queries(user_prompt, model_id):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        api_key = st.secrets.get("OPENROUTER_API_KEY")
        if not api_key:
            print("API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")
            return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
    except Exception as e:
         print(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
         return []

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "http://localhost:8501", # –ó–∞–º–µ–Ω–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        "X-Title": "Streamlit Smart Chat AI"
    }

    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò, —á—Ç–æ–±—ã –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã
    generation_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–æ {MAX_QUERIES_TO_GENERATE} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Å–∞–º—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ –∑–∞–ø—Ä–æ—Å—ã, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"{user_prompt}"

–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:"""

    payload = {
        "model": model_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å, —á—Ç–æ –∏ –¥–ª—è —á–∞—Ç–∞, –∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é
        "messages": [{"role": "user", "content": generation_prompt}],
        "max_tokens": 100, # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        "temperature": 0.3, # –î–µ–ª–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π
    }

    generated_queries = []
    try:
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è: '{user_prompt[:50]}...'")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        data = response.json()
        raw_queries = data.get("choices", [{}])[0].get("message", {}).get("content", "")

        if raw_queries:
            # –û—á–∏—â–∞–µ–º –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
            queries = [q.strip() for q in raw_queries.split('\n') if q.strip()]
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –º–∞—Ä–∫–µ—Ä—ã —Ç–∏–ø–∞ "-", "*"
            queries = [re.sub(r"^\s*[\d\.\-\*]+\s*", "", q) for q in queries]
            generated_queries = [q for q in queries if q] # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {generated_queries}")

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        # traceback.print_exc()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    return generated_queries[:MAX_QUERIES_TO_GENERATE] # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π


# --- –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---
def perform_web_search(queries: list, max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    all_results_text = ""
    if not queries:
        return "–ù–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."

    print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º: {queries}")
    aggregated_results = []

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        with DDGS(timeout=15) as ddgs: # –£–≤–µ–ª–∏—á–∏–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
            for query in queries:
                print(f"–ü–æ–∏—Å–∫: '{query}'...")
                try:
                    search_results = list(ddgs.text(query, max_results=max_results_per_query))
                    if search_results:
                        aggregated_results.extend(search_results) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                        print(f"  –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                    else:
                         print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                except Exception as e_inner:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {e_inner}")
                    continue # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º

        if aggregated_results:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å—Å—ã–ª–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            unique_results = {result['href']: result for result in aggregated_results}.values()

            all_results_text += "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n"
            for i, result in enumerate(unique_results, 1):
                title = result.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                body = result.get('body', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                href = result.get('href', '#')
                body_short = (body[:180] + '...') if len(body) > 180 else body
                all_results_text += f"{i}. [{title}]({href}): {body_short}\n"
            print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {len(unique_results)}")
        else:
             all_results_text = "–ü–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ—Ç–∏."

        return all_results_text.strip()

    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
        # traceback.print_exc()
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏."

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "all_chats" not in st.session_state:
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if not st.session_state.active_chat or st.session_state.active_chat not in st.session_state.all_chats:
         if st.session_state.all_chats:
             st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]
         else: # –°–æ–≤—Å–µ–º –≤—Å–µ –ø–ª–æ—Ö–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
             new_name = generate_new_chat_name([])
             st.session_state.all_chats = {new_name: []}
             st.session_state.active_chat = new_name
             save_all_chats(st.session_state.all_chats, st.session_state.active_chat)


if "selected_mode" not in st.session_state:
    st.session_state.selected_mode = DEFAULT_MODE

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ ---
active_chat_name = st.session_state.active_chat
active_chat_history = list(st.session_state.all_chats.get(active_chat_name, []))

# --- –°–∞–π–¥–±–∞—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
with st.sidebar:
    # ... (–∫–æ–¥ —Å–∞–π–¥–±–∞—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    st.markdown("## üí¨ –ß–∞—Ç—ã")
    chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(active_chat_name)
    except ValueError: active_chat_index = 0 if chat_names else -1 # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞

    if active_chat_index != -1:
         selected_chat = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", options=chat_names, index=active_chat_index,
            label_visibility="collapsed", key="chat_selector"
        )

         if selected_chat != active_chat_name:
            st.session_state.active_chat = selected_chat
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
            st.rerun()
    else:
        st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.") # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç

    st.divider()

    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"):
        new_name = generate_new_chat_name(list(st.session_state.all_chats.keys()))
        st.session_state.all_chats[new_name] = []
        st.session_state.active_chat = new_name
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    if len(chat_names) > 0 and active_chat_index != -1:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            current_active_chat_to_delete = st.session_state.active_chat # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ –≤–æ–∑–º–æ–∂–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            if current_active_chat_to_delete in st.session_state.all_chats:
                del st.session_state.all_chats[current_active_chat_to_delete]
                remaining_chats = list(st.session_state.all_chats.keys())
                if remaining_chats: st.session_state.active_chat = remaining_chats[0]
                else:
                    # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    new_name = generate_new_chat_name([])
                    st.session_state.all_chats = {new_name: []}
                    st.session_state.active_chat = new_name
                save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
                st.rerun()

    st.divider()

    mode_options = list(MODES.keys())
    try: current_mode_index = mode_options.index(st.session_state.selected_mode)
    except ValueError: current_mode_index = 0

    selected_mode_radio = st.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index,
        key="mode_selector"
    )
    if selected_mode_radio != st.session_state.selected_mode:
        st.session_state.selected_mode = selected_mode_radio
        st.rerun()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç
if not active_chat_history:
     welcome_message = {"role": "assistant", "content": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø {current_mode_name}, –≤–∞—à —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–µ–±-–ø–æ–∏—Å–∫—É. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."}
     # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
     if active_chat_name in st.session_state.all_chats:
         st.session_state.all_chats[active_chat_name] = [welcome_message]
         save_all_chats(st.session_state.all_chats, active_chat_name)
         active_chat_history = [welcome_message]
     else:
         # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã—à–µ), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
         active_chat_name = generate_new_chat_name(list(st.session_state.all_chats.keys()))
         st.session_state.all_chats[active_chat_name] = [welcome_message]
         st.session_state.active_chat = active_chat_name
         save_all_chats(st.session_state.all_chats, active_chat_name)
         active_chat_history = [welcome_message]


# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
chat_display_container = st.container()
with chat_display_container:
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    for message in list(st.session_state.all_chats.get(active_chat_name, [])):
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "ü§ñ"
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"], unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id_func, chat_history_func):
    # ... (–∫–æ–¥ stream_ai_response –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try:
        api_key_from_secrets = st.secrets.get("OPENROUTER_API_KEY")
        if not api_key_from_secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π.", icon="üö®")
             yield None; return
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º: {e}", icon="üí•")
        yield None; return

    headers = {"Authorization": f"Bearer {api_key_from_secrets}", "Content-Type": "application/json"}
    if not isinstance(chat_history_func, list):
        print("–û—à–∏–±–∫–∞: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.")
        yield None; return

    headers.update({
        "HTTP-Referer": "http://localhost:8501", # –ó–∞–º–µ–Ω–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        "X-Title": "Streamlit Smart Chat AI" # –û–±–Ω–æ–≤–ª–µ–Ω–æ
    })

    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=180) # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –µ—â–µ
        response.raise_for_status()
        has_content = False
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta_content = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                        if delta_content:
                            has_content = True
                            yield delta_content
                    except json.JSONDecodeError:
                        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {decoded_line}")
                        continue
                    except Exception as e_json:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e_json}")
                        continue
        if not has_content:
             print("–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

    except requests.exceptions.Timeout:
        st.error("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.", icon="‚è±Ô∏è")
        print("–û—à–∏–±–∫–∞: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API.")
        yield None
    except requests.exceptions.RequestException as e:
        st.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {e}", icon="üíî")
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        yield None
    except Exception as e:
        st.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}", icon="üî•")
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}")
        yield None


# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if active_chat_name in st.session_state.all_chats:
        st.session_state.all_chats[active_chat_name].append({"role": "user", "content": prompt})
        save_all_chats(st.session_state.all_chats, active_chat_name)
        st.rerun()
    else:
        st.error("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.")


# --- –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò ---
# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ session_state
current_chat_state = st.session_state.all_chats.get(active_chat_name, [])

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if current_chat_state and current_chat_state[-1]["role"] == "user":

    last_user_prompt = current_chat_state[-1]["content"]
    print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: '{last_user_prompt[:100]}...' ---")

    # --- –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generated_queries = generate_search_queries(last_user_prompt, current_model_id)

    # --- –≠—Ç–∞–ø 2: –í–µ–±-–ø–æ–∏—Å–∫ –ø–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º ---
    if generated_queries:
        # –ï—Å–ª–∏ –ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã, –∏—â–µ–º –ø–æ –Ω–∏–º
        search_results_str = perform_web_search(generated_queries)
    else:
        # –ï—Å–ª–∏ –ò–ò –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã (–æ—à–∏–±–∫–∞ –∏–ª–∏ —Ä–µ—à–∏–ª, —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ),
        # –º–æ–∂–Ω–æ –ª–∏–±–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–∞—Ç—å, –ª–∏–±–æ –∏—Å–∫–∞—Ç—å –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        # –†–µ—à–µ–Ω–∏–µ: –∏—â–µ–º –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
        print("–ò–ò –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        search_results_str = perform_web_search([last_user_prompt], max_results_per_query=MAX_SEARCH_RESULTS) # –ò—â–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–∏–Ω

    # --- –≠—Ç–∞–ø 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---
    context_for_final_answer = list(current_chat_state) # –°–Ω–æ–≤–∞ –±–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω—ã–º–∏
    is_search_successful = not ("–ù–µ —É–¥–∞–ª–æ—Å—å" in search_results_str or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in search_results_str or "–ù–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ" in search_results_str)

    if is_search_successful and search_results_str:
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        search_context_message = {
            "role": "system",
            "content": (
                f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                f"1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).\n"
                f"2. –í—ã–ø–æ–ª–Ω–µ–Ω –≤–µ–±-–ø–æ–∏—Å–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ.\n\n"
                f"{search_results_str}\n--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---\n\n"
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ï–°–õ–ò –û–ù–ê –†–ï–õ–ï–í–ê–ù–¢–ù–ê –ò –ê–ö–¢–£–ê–õ–¨–ù–ê, —á—Ç–æ–±—ã –¥–∞—Ç—å –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                "–ù–µ —Ü–∏—Ç–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é, –∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –æ–Ω–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–µ–ª—É, –æ—Å–Ω–æ–≤—ã–≤–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö. "
                "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."
            )
        }
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context_for_final_answer.insert(-1, search_context_message)
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")

    elif search_results_str: # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª
         # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
         search_context_message = {
            "role": "system",
             "content": f"(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {search_results_str}. –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö.)"
         }
         context_for_final_answer.insert(-1, search_context_message)
         print("–í –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")
    else:
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")


    # --- –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---
    with chat_display_container:
        with st.chat_message("assistant", avatar="ü§ñ"):
            print("–ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É –ò–ò...")
            response_generator = stream_ai_response(current_model_id, context_for_final_answer)
            full_response = st.write_stream(response_generator)
            print("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω.")

    # --- –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
    if full_response:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é –≤ session_state
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if active_chat_name in st.session_state.all_chats:
             st.session_state.all_chats[active_chat_name].append({"role": "assistant", "content": full_response})
             save_all_chats(st.session_state.all_chats, active_chat_name)
             print("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        else:
             print("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏—Å—á–µ–∑ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞.")
             st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ß–∞—Ç –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω.")

    print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")


# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
