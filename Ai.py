# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç OPENROUTER_API_KEY –¥–æ–±–∞–≤–ª–µ–Ω –≤ Streamlit Cloud
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL_V3_NAME = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
MODEL_V3_ID = "deepseek/deepseek-chat-v3-0324:free"
MODEL_R1_NAME = "DeepThink (R1)"
MODEL_R1_ID = "deepseek/deepseek-r1:free"
LOCAL_STORAGE_KEY = "multi_chat_storage_v4" # –û–±–Ω–æ–≤–∏–ª –∫–ª—é—á
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="DeepSeek-–ø–æ–¥–æ–±–Ω—ã–π –ß–∞—Ç",
    page_icon="üê≥", # –ò–∫–æ–Ω–∫–∞ –∫–∏—Ç–∞
    layout="centered", # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
    initial_sidebar_state="collapsed" # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∞–π–¥–±–∞—Ä Streamlit
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS ---
custom_css = f"""
<style>
    /* --- –ë–∞–∑–æ–≤–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ (Streamlit —Å–∞–º –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å) --- */
    body {{
        /* background-color: #2f3136; */ /* –ü—Ä–∏–º–µ—Ä —Ñ–æ–Ω–∞ Discord */
        /* color: #dcddde; */
    }}

    /* --- –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É --- */
     .main .block-container {{
        padding-top: 1rem;
        padding-bottom: 3.5rem; /* –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç */
    }}

     /* --- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è --- */
    .welcome-block {{
        text-align: center;
        margin-bottom: 2rem;
    }}
    .welcome-block h1 {{
        font-size: 2.5rem; /* –ö—Ä—É–ø–Ω–µ–µ */
        margin-bottom: 0.5rem;
    }}
     .welcome-block p {{
        font-size: 1.1rem;
        color: #b9bbbe; /* –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π */
     }}

     /* --- –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –∏ –º–æ–¥–µ–ª—å—é --- */
     .controls-container {{
        max-width: 600px; /* –û–≥—Ä–∞–Ω–∏—á–∏–º —à–∏—Ä–∏–Ω—É –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è */
        margin: 0 auto 1.5rem auto; /* –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –±–ª–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É */
        padding: 15px;
        background-color: rgba(79,84,92, 0.3); /* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–µ—Ä—ã–π —Ñ–æ–Ω */
        border-radius: 8px;
     }}
     .controls-container .stButton button {{ width: auto; margin: 0 5px; }} /* –ö–Ω–æ–ø–∫–∏ —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */
     .controls-container .stSelectbox {{ width: 100%; margin-bottom: 10px; }} /* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å —á–∞—Ç–æ–≤ */
     .controls-container [data-testid="stHorizontalBlock"] {{ /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
        display: flex;
        justify-content: center;
        margin-bottom: 15px;
     }}
     /* –°—Ç–∏–ª–∏ –¥–ª—è st.toggle */
    .controls-container [data-testid="stToggle"] label {{
        display: flex;
        align-items: center;
        justify-content: center; /* –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º toggle */
        cursor: pointer;
        color: #b9bbbe;
    }}

    /* --- –°—Ç–∏–ª–∏ —á–∞—Ç–∞ --- */
    .stChatFloatingInputContainer {{ /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */
        background-color: #40444b; /* –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –ø–æ–ª—è –≤–≤–æ–¥–∞ */
        border-top: 1px solid #2f3136;
    }}
    /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–∞–º–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ */
     .stChatFloatingInputContainer textarea {{
        background-color: #40444b;
        color: #dcddde;
        border: none;
     }}
     /* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */
     .stChatFloatingInputContainer button[data-testid="send-button"] svg {{
        fill: #7289da; /* –¶–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (Discord —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π) */
     }}

    [data-testid="stChatMessage"] {{ /* –°–æ–æ–±—â–µ–Ω–∏—è */
        background-color: transparent; /* –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç.–∫. —Ñ–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–º–Ω—ã–π */
        border-radius: 0;
        padding: 5px 0; /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã */
        margin-bottom: 0;
        box-shadow: none;
        max-width: 100%; /* –°–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –≤—Å—é —à–∏—Ä–∏–Ω—É */
    }}
     /* –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–±–æ—Ç–∞ */
     [data-testid="stChatMessage"] [data-testid="chatAvatarIcon-user"],
     [data-testid="stChatMessage"] [data-testid="chatAvatarIcon-assistant"] {{
        /* background-color: #7289da; */ /* –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ñ–æ–Ω –∞–≤–∞—Ç–∞—Ä—É */
     }}
    [data-testid="stChatMessageContent"] {{
        color: #dcddde; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */
    }}
    [data-testid="stChatMessageContent"] p {{ margin-bottom: 0.2rem; }}

    /* --- –¢–µ–º–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) --- */
    [data-testid="stChatMessage"] code {{ background-color: #282c34; color: #abb2bf; ... }}
    [data-testid="stChatMessage"] pre {{ background-color: #282c34; border: 1px solid #3b4048; ... }}
    [data-testid="stChatMessage"] pre code {{ background-color: transparent; color: #abb2bf; ... }}

    /* --- –°–∫—Ä—ã—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∞–π–¥–±–∞—Ä Streamlit --- */
    [data-testid="stSidebar"] {{ display: none; }}

</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                return data["chats"], data["active_chat"]
        except json.JSONDecodeError: pass
    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"
    default_chats = {first_chat_name: []}
    return default_chats, first_chat_name

def save_all_chats(chats_dict, active_chat_name):
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        data_to_save = {"chats": chats_dict, "active_chat": active_chat_name}
        try:
            localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e: return False
    return False

def generate_new_chat_name(existing_names):
    i = 1
    while f"{DEFAULT_CHAT_NAME} {i}" in existing_names: i += 1
    return f"{DEFAULT_CHAT_NAME} {i}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "all_chats" not in st.session_state:
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
    if st.session_state.active_chat not in st.session_state.all_chats:
        if st.session_state.all_chats:
            st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]
        else:
            new_name = generate_new_chat_name([])
            st.session_state.all_chats = {new_name: []}
            st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
if "thinking_enabled" not in st.session_state:
    st.session_state.thinking_enabled = False

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
st.markdown("""
<div class="welcome-block">
    <h1>üê≥ Hi, I'm DeepSeek.</h1>
    <p>How can I help you today?</p>
</div>
""", unsafe_allow_html=True)

# --- –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –∏ –º–æ–¥–µ–ª—å—é ---
with st.container():
    st.markdown('<div class="controls-container">', unsafe_allow_html=True) # –û—Ç–∫—Ä—ã–≤–∞–µ–º div –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏

    chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(st.session_state.active_chat)
    except ValueError: active_chat_index = 0

    selected_chat = st.selectbox(
        "–¢–µ–∫—É—â–∏–π —á–∞—Ç:", options=chat_names, index=active_chat_index,
        label_visibility="collapsed"
    )

    if selected_chat != st.session_state.active_chat:
        st.session_state.active_chat = selected_chat
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–µ–ª–µ–∫—Ç–±–æ–∫—Å–æ–º
    cols = st.columns(2)
    with cols[0]:
        if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç"):
            new_name = generate_new_chat_name(chat_names)
            st.session_state.all_chats[new_name] = []
            st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
            st.rerun()
    with cols[1]:
        if len(chat_names) > 0:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π"): # –£–∫–æ—Ä–æ—Ç–∏–ª —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                if st.session_state.active_chat in st.session_state.all_chats:
                    del st.session_state.all_chats[st.session_state.active_chat]
                    remaining_chats = list(st.session_state.all_chats.keys())
                    if remaining_chats: st.session_state.active_chat = remaining_chats[0]
                    else:
                        new_name = generate_new_chat_name([])
                        st.session_state.all_chats = {new_name: []}
                        st.session_state.active_chat = new_name
                    save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
                    st.rerun()

    st.write("") # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø

    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–æ–¥–µ–ª–∏
    st.session_state.thinking_enabled = st.toggle(
        f"–†–µ–∂–∏–º: {MODEL_R1_NAME if st.session_state.thinking_enabled else MODEL_V3_NAME}",
        value=st.session_state.thinking_enabled,
        help="–í–∫–ª—é—á–µ–Ω–æ - DeepThink (R1), –í—ã–∫–ª—é—á–µ–Ω–æ - –°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
    )

    st.markdown('</div>', unsafe_allow_html=True) # –ó–∞–∫—Ä—ã–≤–∞–µ–º div

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å ---
is_thinking_enabled = st.session_state.get("thinking_enabled", False)
current_model_name = MODEL_R1_NAME if is_thinking_enabled else MODEL_V3_NAME
current_model_id = MODEL_R1_ID if is_thinking_enabled else MODEL_V3_ID

# --- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏) ---
chat_container = st.container()
with chat_container:
    current_messages = st.session_state.all_chats.get(st.session_state.active_chat, [])
    if not current_messages:
         current_messages.append(
             {"role": "assistant", "content": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø {current_model_name}. –°–ø—Ä–∞—à–∏–≤–∞–π!"}
         )
         st.session_state.all_chats[st.session_state.active_chat] = current_messages
         save_all_chats(st.session_state.all_chats, st.session_state.active_chat)

    for message in current_messages:
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "üê≥" # –ö–∏—Ç –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"])


# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id_func, chat_history_func):
    try:
        if "OPENROUTER_API_KEY" not in st.secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="üö®")
             yield None; return
        api_key_from_secrets = st.secrets["OPENROUTER_API_KEY"]
        if not api_key_from_secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –ø—É—Å—Ç–æ–π.", icon="üö®")
             yield None; return
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º: {e}", icon="üí•")
        yield None; return

    headers = {"Authorization": f"Bearer {api_key_from_secrets}", "Content-Type": "application/json"}
    if not isinstance(chat_history_func, list): yield None; return # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=90)
        response.raise_for_status()
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta_content = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                        if delta_content: yield delta_content
                    except: continue # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞–Ω–∫–æ–≤
    except requests.exceptions.RequestException as e: yield None # –û—à–∏–±–∫–∞ API/–°–µ—Ç–∏
    except Exception as e: yield None # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input(f"Message {current_model_name}..."): # Placeholder –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏

    active_chat_name = st.session_state.active_chat
    active_chat_history = st.session_state.all_chats.get(active_chat_name, [])
    active_chat_history.append({"role": "user", "content": prompt})
    st.session_state.all_chats[active_chat_name] = active_chat_history
    save_all_chats(st.session_state.all_chats, active_chat_name)

    # --- –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –°–†–ê–ó–£ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò
    # –ú—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º with st.chat_message –∑–¥–µ—Å—å, —Ç.–∫. –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è
    st.rerun()

# --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò (–≤—ã–Ω–µ—Å–µ–Ω–∞ –∏–∑-–ø–æ–¥ if prompt) ---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–≥–æ
active_chat_history = st.session_state.all_chats.get(st.session_state.active_chat, [])
if active_chat_history and active_chat_history[-1]["role"] == "user":
     # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
     with chat_container: # –†–∏—Å—É–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–∞—Ç–∞
         with st.chat_message("assistant", avatar="üê≥"):
             # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
             full_response = st.write_stream(stream_ai_response(current_model_id, active_chat_history))

     # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
     if full_response:
         active_chat_history.append({"role": "assistant", "content": full_response})
         st.session_state.all_chats[st.session_state.active_chat] = active_chat_history
         save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
         # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º rerun –∑–¥–µ—Å—å, —Ç.–∫. st.write_stream —É–∂–µ –æ–±–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
