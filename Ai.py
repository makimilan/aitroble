# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–∑–∞–≥—Ä—É–∑–∫–µ
from streamlit_local_storage import LocalStorage # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ

# --- API –ö–õ–Æ–ß –ë–£–î–ï–¢ –í–ó–Ø–¢ –ò–ó –°–ï–ö–†–ï–¢–û–í STREAMLIT ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ share.streamlit.io
# –≤ —Ä–∞–∑–¥–µ–ª–µ Secrets –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞:
# OPENROUTER_API_KEY = "sk-or-v1-..."
# --------------------------------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
AVAILABLE_MODELS = {
    "DeepSeek Chat v3 (Free)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepSeek R1 (Free)": "deepseek/deepseek-r1:free",
}
LOCAL_STORAGE_KEY = "ai_chat_history_v2" # –°–ª–µ–≥–∫–∞ –∏–∑–º–µ–Ω–∏–ª –∫–ª—é—á –Ω–∞ —Å–ª—É—á–∞–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
    page_icon="üí¨",
    layout="wide",
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS ---
custom_css = """
<style>
    .stApp { } /* –û–±—â–∏–π —Ñ–æ–Ω */

    .stChatFloatingInputContainer { /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */
        background-color: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(5px);
        border-top: 1px solid #e6e6e6;
    }
    [data-testid="stChatMessage"] { /* –°–æ–æ–±—â–µ–Ω–∏—è */
        border-radius: 15px; padding: 12px 18px; margin-bottom: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05); max-width: 90%;
    }
    [data-testid="stChatMessageContent"] p { margin-bottom: 0.5rem; }

    /* –¢–µ–º–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ */
    [data-testid="stChatMessage"] code {
        background-color: #282c34; color: #abb2bf; padding: 0.15em 0.4em;
        border-radius: 3px; font-size: 0.9em; word-wrap: break-word;
    }
    [data-testid="stChatMessage"] pre {
        background-color: #282c34; border: 1px solid #3b4048; border-radius: 5px;
        padding: 12px; overflow-x: auto; font-size: 0.9em;
    }
    [data-testid="stChatMessage"] pre code {
        background-color: transparent; color: #abb2bf; padding: 0;
        font-size: inherit; border-radius: 0;
    }
    h1 { text-align: center; padding-bottom: 10px; } /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Ä–∞–¥–∏–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ */
    .stButton button { border-radius: 8px; }
    .stRadio label { font-weight: bold; } /* –£–±—Ä–∞–ª–∏ .stSelectbox */
    /* –ö—É—Ä—Å–æ—Ä –¥–ª—è Radio */
    div[role="radiogroup"] label { cursor: pointer; }

    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ */
    div[data-testid="stHorizontalBlock"] {
        display: flex;
        justify-content: center; /* –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ */
        align-items: center; /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ */
        flex-wrap: wrap; /* –ü–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É */
        margin-bottom: 10px; /* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É */
    }
     /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ */
    div[data-testid="stRadio"] {
        display: flex; /* –ò—Å–ø–æ–ª—å–∑—É–µ–º flex –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */
        justify-content: center; /* –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ */
        width: 100%; /* –ó–∞–Ω–∏–º–∞–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è */
        margin-bottom: 10px; /* –û—Ç—Å—Ç—É–ø –ø–æ–¥ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞–º–∏ */
    }
     /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ */
     div.stButton {
        display: flex;
        justify-content: center; /* –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É */
        width: 100%;
     }


</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")
st.write("") # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø

# --- –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ ---
with st.container(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º radio –¥–ª—è –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
    selected_model_name = st.radio(
        "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
        options=list(AVAILABLE_MODELS.keys()),
        horizontal=True, # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –æ–ø—Ü–∏–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
        # key —É–±—Ä–∞–Ω
        label_visibility="collapsed" # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π label "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:"
    )
    model_id = AVAILABLE_MODELS[selected_model_name]
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ ID –ø–æ–¥ —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∞–º–∏
    st.caption(f"–í—ã–±—Ä–∞–Ω–æ: **{selected_model_name}** (ID: `{model_id}`)", unsafe_allow_html=True)

    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥ –º–æ–¥–µ–ª—å—é
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", type="secondary"): # key —É–±—Ä–∞–Ω
        st.session_state.messages = [
             {"role": "assistant", "content": f"üëã –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–ø–µ—Ä—å?"}
        ]
        localS.deleteItem(LOCAL_STORAGE_KEY)
        st.rerun()

st.divider() # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
if "history_loaded" not in st.session_state:
    st.session_state.messages = []
    saved_history_str = localS.getItem(LOCAL_STORAGE_KEY)
    loaded_successfully = False
    if saved_history_str:
        try:
            saved_history = json.loads(saved_history_str)
            if isinstance(saved_history, list) and saved_history:
                st.session_state.messages = saved_history
                # –£–±—Ä–∞–ª st.info –æ –∑–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ
                loaded_successfully = True
        except json.JSONDecodeError:
             pass

    if not loaded_successfully:
         st.session_state.messages = [
             {"role": "assistant", "content": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ ({selected_model_name}). –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"}
         ]
    st.session_state.history_loaded = True


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
if "messages" in st.session_state:
    for message in st.session_state.messages[:]:
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "ü§ñ"
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"])

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –°–¢–†–ò–ú–ò–ù–ì–ê –æ—Ç–≤–µ—Ç–∞ API OpenRouter ---
# (–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –ø—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –Ω–µ –≤ –Ω–µ–π)
def stream_ai_response(model_id_func, chat_history_func):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É API –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Å–æ—á–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
    try:
        if "OPENROUTER_API_KEY" not in st.secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="üö®")
             yield None; return
        api_key_from_secrets = st.secrets["OPENROUTER_API_KEY"]
        if not api_key_from_secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –ø—É—Å—Ç–æ–π.", icon="üö®")
             yield None; return
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º: {e}", icon="üí•")
        yield None; return

    headers = {"Authorization": f"Bearer {api_key_from_secrets}", "Content-Type": "application/json"}
    if not isinstance(chat_history_func, list):
         st.error("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏.", icon="‚ö†Ô∏è")
         yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=90)
        response.raise_for_status()
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta_content = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                        if delta_content: yield delta_content
                    except json.JSONDecodeError: continue
                    except Exception as e: break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞–Ω–∫–∞
    except requests.exceptions.Timeout:
        st.error("‚è≥ –¢–∞–π–º–∞—É—Ç.", icon="‚è±Ô∏è"); yield None
    except requests.exceptions.RequestException as e:
        error_message = f"–û—à–∏–±–∫–∞ API: {e}"
        try:
             if e.response is not None: error_message += f" ({e.response.text[:100]})"
        except: pass
        st.error(error_message, icon="üåê"); yield None
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}", icon="üí•"); yield None

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å..."): # key —É–±—Ä–∞–Ω

    if "messages" not in st.session_state or not isinstance(st.session_state.messages, list):
        st.session_state.messages = []

    # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –°–û–•–†–ê–ù–Ø–ï–ú –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user", "content": prompt})
    try:
        localS.setItem(LOCAL_STORAGE_KEY, json.dumps(st.session_state.messages))
    except Exception as e:
        # –û—à–∏–±–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –Ω–µ –≤—ã–≤–æ–¥–∏–º —è–≤–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å
        pass # st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}", icon="üíæ")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.chat_message("user", avatar="üßë‚Äçüíª"):
        st.markdown(prompt)

    # 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    with st.chat_message("assistant", avatar="ü§ñ"):
        current_chat_history = st.session_state.get("messages", [])
        full_response = st.write_stream(stream_ai_response(model_id, current_chat_history))

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç –ò–ò –∏ –°–ù–û–í–ê –°–û–•–†–ê–ù–Ø–ï–ú –∏—Å—Ç–æ—Ä–∏—é
    if full_response:
        if isinstance(st.session_state.messages, list):
             st.session_state.messages.append({"role": "assistant", "content": full_response})
             try:
                 localS.setItem(LOCAL_STORAGE_KEY, json.dumps(st.session_state.messages))
             except Exception as e:
                  # –û—à–∏–±–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –Ω–µ –≤—ã–≤–æ–¥–∏–º —è–≤–Ω–æ
                  pass # st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}", icon="üíæ")
        else:
             st.session_state.messages = [{"role": "assistant", "content": full_response}]


# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
