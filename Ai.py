# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage
from duckduckgo_search import DDGS
import traceback
import re
import logging
from html import unescape

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
OPENROUTER_API_KEY = st.secrets.get("OPENROUTER_API_KEY")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v17" # –°–Ω–æ–≤–∞ —Å–º–µ–Ω–∏–ª –∫–ª—é—á
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"
MAX_SEARCH_RESULTS_PER_QUERY = 4
MAX_QUERIES_TO_GENERATE = 3
MAX_SNIPPET_LENGTH = 300
REQUEST_TIMEOUT = 35
STREAM_TIMEOUT = 180

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ß–∞—Ç –ò–ò —Å–æ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–º v3 (st.write)", page_icon="üí°", layout="wide", initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
try:
    localS = LocalStorage()
except Exception as e:
    logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LocalStorage: {e}", exc_info=True)
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.", icon="üö®")
    localS = None

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS ---
# –£–±—Ä–∞–ª —Å—Ç–∏–ª—å –¥–ª—è streaming-placeholder, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
custom_css = f"""
<style>
     .main .block-container {{ padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem; }}
    [data-testid="stChatMessage"] {{ background: none !important; border: none !important; box-shadow: none !important; padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important; }}
    [data-testid="stChatMessage"] > div {{ gap: 0.75rem; }}
    [data-testid="stChatMessage"] .stChatMessageContent {{ padding: 0 !important; }}
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}
    [data-testid="stSidebar"] [data-testid="stToggle"] label {{ font-size: 0.95rem; font-weight: bold; }}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ ---
if not OPENROUTER_API_KEY:
    st.error("‚õî –ö–ª—é—á API OpenRouter (`OPENROUTER_API_KEY`) –Ω–µ –Ω–∞–π–¥–µ–Ω!", icon="üö®")
    logging.error("–ö–ª—é—á API OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    st.stop()

# --- –ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ ---
class StreamWriteWrapper:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ st.write."""
    def __init__(self, generator):
        self._generator = generator
        self._buffer = []
        self._error_occurred = False

    def __iter__(self):
        self._buffer = [] # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        self._error_occurred = False
        try:
            for chunk in self._generator:
                if chunk is not None:
                    self._buffer.append(chunk)
                    yield chunk
                else:
                    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª None, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
                    self._error_occurred = True
                    logging.error("StreamWriteWrapper: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª None (–æ—à–∏–±–∫–∞).")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º yield, —á—Ç–æ–±—ã st.write –º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è,
                    # –Ω–æ —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        except Exception as e:
            self._error_occurred = True
            logging.error(f"StreamWriteWrapper: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}", exc_info=True)
            # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã st.write –º–æ–≥ –µ–≥–æ –ø–æ–π–º–∞—Ç—å (–µ—Å–ª–∏ –æ–Ω —ç—Ç–æ –¥–µ–ª–∞–µ—Ç)
            # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
            # –î–ª—è –±–æ–ª—å—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–ª–∞–≥ –∏ –Ω–µ –±—É–¥–µ–º –Ω–∏—á–µ–≥–æ yield'–∏—Ç—å –¥–∞–ª—å—à–µ
            yield f"\n\n**–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}**" # –û—Ç–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏

    @property
    def full_response(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–æ–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        return "".join(self._buffer)

    @property
    def error_occurred(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."""
        # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ò–õ–ò –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ (—Ç.–∫. –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ)
        # –ù–æ –ò–ò –º–æ–≥ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–∫–∏. –°–ª–æ–∂–Ω–æ –æ—Ç–ª–∏—á–∏—Ç—å.
        # –ë—É–¥–µ–º –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —Ñ–ª–∞–≥ _error_occurred.
        return self._error_occurred

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ ---
# (load_all_chats, save_all_chats, generate_new_chat_name - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def load_all_chats():
    default_chats = {f"{DEFAULT_CHAT_NAME} 1": []}; default_name = f"{DEFAULT_CHAT_NAME} 1"; initial_search_state = False
    if not localS: logging.warning("LocalStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."); st.session_state.web_search_enabled = initial_search_state; return default_chats, default_name
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                cleaned_chats = {}; active_chat = data["active_chat"]
                for name, history in data["chats"].items(): cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and msg.get("role") and msg.get("content")] if isinstance(history, list) else []
                if not cleaned_chats: st.session_state.web_search_enabled = initial_search_state; return default_chats, default_name
                if active_chat not in cleaned_chats: active_chat = list(cleaned_chats.keys())[0]; logging.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{data['active_chat']}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞–Ω '{active_chat}'.")
                st.session_state.web_search_enabled = data.get("web_search_enabled", initial_search_state)
                logging.info(f"–ß–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({st.session_state.web_search_enabled=})."); return cleaned_chats, active_chat
            else: logging.warning("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ LS –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}.", exc_info=True)
    else: logging.info("–î–∞–Ω–Ω—ã–µ –≤ LS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    st.session_state.web_search_enabled = initial_search_state; return default_chats, default_name

def save_all_chats(chats_dict, active_chat_name, web_search_state):
    if not localS: logging.warning("LocalStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."); return False
    if not isinstance(chats_dict, dict): logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."); return False
    if not isinstance(active_chat_name, str) and active_chat_name is not None: logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞."); return False
    cleaned_chats = {}
    for name, history in chats_dict.items(): cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and msg.get("role") and msg.get("content")] if isinstance(history, list) else []
    if not cleaned_chats: active_chat_name = None
    elif active_chat_name not in cleaned_chats: active_chat_name = list(cleaned_chats.keys())[0] if cleaned_chats else None; logging.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞–Ω: {active_chat_name}")
    data_to_save = {"chats": cleaned_chats, "active_chat": active_chat_name, "web_search_enabled": web_search_state}
    try: localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); logging.info(f"–ß–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."); return True
    except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}", exc_info=True); st.toast("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", icon="üö®"); return False

def generate_new_chat_name(existing_names):
    i = 1
    base_name = DEFAULT_CHAT_NAME
    while f"{base_name} {i}" in existing_names:
        i += 1
    return f"{base_name} {i}"

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ---
# (generate_search_queries, clean_html, perform_web_search - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def generate_search_queries(user_prompt, model_id):
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}","Content-Type": "application/json","HTTP-Referer": "http://localhost:8501","X-Title": "Streamlit Improved Search Chat AI"}
    current_date_str = datetime.datetime.now().strftime('%d %B %Y')
    generation_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ {MAX_QUERIES_TO_GENERATE} –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö, **–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**. –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã —Ç–∞–∫, –∫–∞–∫ –∏—Ö –∑–∞–¥–∞–ª –±—ã –ª—é–±–æ–ø—ã—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google, DuckDuckGo), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n**–ò–∑–±–µ–≥–∞–π –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.** –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã.\n–£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑–º–æ–∂–Ω—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å–µ–≥–æ–¥–Ω—è {current_date_str}).\n\n–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n- "–ö–∞–∫–æ–≤—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ [—Ç–µ–º–∞]?"\n- "–ö–∞–∫ [—Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ] –ø–æ—à–∞–≥–æ–≤–æ?"\n- "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ [–ø—Ä–æ–¥—É–∫—Ç –ê] –∏ [–ø—Ä–æ–¥—É–∫—Ç –ë] –≤ {datetime.datetime.now().year} –≥–æ–¥—É"\n- "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ [—Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è]"\n- "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ [—Å–ª–æ–∂–Ω—ã–π —Ç–µ—Ä–º–∏–Ω] –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"\n- "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ [—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è]"\n\n–í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ (*, -).\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"{user_prompt}"\n\n–ü–æ–∏—Å–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:"""
    payload = {"model": model_id, "messages": [{"role": "user", "content": generation_prompt}], "max_tokens": 150, "temperature": 0.4, "stop": ["\n\n"]}
    generated_queries = []
    try:
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –í–û–ü–†–û–°–û–í –¥–ª—è: '{user_prompt[:50]}...'")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=REQUEST_TIMEOUT); response.raise_for_status()
        data = response.json(); raw_queries = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        if raw_queries: queries = [re.sub(r"^\s*[\d\.\-\*]+\s*", "", q.strip()) for q in raw_queries.split('\n') if q.strip()]; generated_queries = [q for q in queries if q]; logging.info(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {generated_queries}")
        else: logging.warning("  API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    except requests.exceptions.Timeout: logging.error("  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: –¢–∞–π–º–∞—É—Ç."); st.toast("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–æ–≤.", icon="‚è±Ô∏è")
    except requests.exceptions.RequestException as e: logging.error(f"  –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}"); st.toast(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", icon="üö®")
    except Exception as e: logging.error(f"  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}", exc_info=True); st.toast("–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.", icon="‚ùì")
    return generated_queries[:MAX_QUERIES_TO_GENERATE]

def clean_html(raw_html):
  if not isinstance(raw_html, str): return ""
  cleanr = re.compile('<.*?>'); cleantext = re.sub(cleanr, '', raw_html); cleantext = unescape(cleantext)
  return cleantext.strip()

def perform_web_search(queries: list, max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY):
    all_results_text = ""; aggregated_results = []; search_errors = []
    if not queries: logging.warning("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞."); return "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞."
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–∞–º...")
    try:
        with DDGS(timeout=REQUEST_TIMEOUT) as ddgs:
            for idx, query in enumerate(queries, 1):
                logging.info(f"  –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å {idx}/{len(queries)}: '{query}'...")
                try:
                    search_results = list(ddgs.text(query, max_results=max_results_per_query))
                    for result in search_results: result['body'] = clean_html(result.get('body', '')); result['title'] = clean_html(result.get('title', ''))
                    aggregated_results.extend(search_results); logging.info(f"    –ù–∞–π–¥–µ–Ω–æ {len(search_results)} –¥–ª—è '{query}'.")
                except Exception as e: logging.error(f"    –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ '{query}': {e}", exc_info=True); search_errors.append(query)
        if search_errors: st.toast(f"–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {', '.join(search_errors)}", icon="üï∏Ô∏è")
        if aggregated_results:
            unique_results_dict = {}
            for res in aggregated_results:
                body = res.get('body')
                if body and body not in unique_results_dict:
                    unique_results_dict[body] = res
            unique_results = list(unique_results_dict.values())
            logging.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(unique_results)}")
            if unique_results:
                result_lines = [f"{i}. {res.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}: {(res.get('body', '')[:MAX_SNIPPET_LENGTH] + '...') if len(res.get('body', '')) > MAX_SNIPPET_LENGTH else res.get('body', '')}" for i, res in enumerate(unique_results, 1)]
                all_results_text = "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n" + "\n\n".join(result_lines)
            else: all_results_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."; logging.info(all_results_text)
        else: all_results_text = "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."; logging.info(all_results_text)
        return all_results_text.strip()
    except Exception as e: logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}", exc_info=True); st.error(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}", icon="üï∏Ô∏è"); return f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}"

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ ---
# (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def stream_ai_response(model_id_func, chat_history_func):
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}","Content-Type": "application/json","HTTP-Referer": "http://localhost:8501","X-Title": "Streamlit Improved Search Chat AI"}
    if not isinstance(chat_history_func, list): logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞."); yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}; stream_successful = False
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {model_id_func}"); response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=STREAM_TIMEOUT); response.raise_for_status(); logging.info("–°—Ç—Ä–∏–º–∏–Ω–≥ –Ω–∞—á–∞—Ç.")
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data_str = decoded_line[len("data: "):].strip()
                        if json_data_str == "[DONE]": logging.info("–°—Ç—Ä–∏–º–∏–Ω–≥ [DONE]."); break
                        if json_data_str: chunk = json.loads(json_data_str); delta = chunk.get("choices", [{}])[0].get("delta", {});
                        if delta and "content" in delta: delta_content = delta["content"]; stream_successful = True; yield delta_content
                    except json.JSONDecodeError as e: logging.warning(f"–û—à–∏–±–∫–∞ JSON —á–∞–Ω–∫–∞: {e}. –°—Ç—Ä–æ–∫–∞: '{json_data_str}'"); continue
                    except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e}"); continue
        if not stream_successful: logging.warning("–°—Ç—Ä–∏–º–∏–Ω–≥ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    except requests.exceptions.Timeout: logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: –¢–∞–π–º–∞—É—Ç ({STREAM_TIMEOUT}s)."); yield None # –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –æ–±–µ—Ä—Ç–∫–µ
    except requests.exceptions.RequestException as e: logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}"); yield None # –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –æ–±–µ—Ä—Ç–∫–µ
    except Exception as e: logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}", exc_info=True); yield None # –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –æ–±–µ—Ä—Ç–∫–µ


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
# (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
if "all_chats" not in st.session_state: logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è."); st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
if "selected_mode" not in st.session_state: st.session_state.selected_mode = DEFAULT_MODE
if "web_search_enabled" not in st.session_state: st.session_state.web_search_enabled = False; logging.warning("web_search_enabled –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, -> False.")

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ---
# (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
if st.session_state.active_chat not in st.session_state.all_chats:
    logging.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{st.session_state.active_chat}' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    if st.session_state.all_chats: st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]; logging.info(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π: '{st.session_state.active_chat}'")
    else: new_name = generate_new_chat_name([]); st.session_state.all_chats = {new_name: []}; st.session_state.active_chat = new_name; logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: '{new_name}'"); save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
active_chat_name = st.session_state.active_chat

# --- –°–∞–π–¥–±–∞—Ä ---
# (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
with st.sidebar:
    st.markdown("## üí¨ –ß–∞—Ç—ã"); chat_names = list(st.session_state.all_chats.keys())
    if chat_names:
        try: active_chat_index = chat_names.index(active_chat_name)
        except ValueError: logging.error(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–ª—é—á–∞—Ö."); active_chat_index = 0
        selected_chat = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",options=chat_names,index=active_chat_index,label_visibility="collapsed",key="chat_selector")
        if selected_chat is not None and selected_chat != active_chat_name: st.session_state.active_chat = selected_chat; logging.info(f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {selected_chat}"); save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled); st.rerun()
    else: st.write("–ù–µ—Ç —á–∞—Ç–æ–≤.")
    st.divider()
    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"): new_name = generate_new_chat_name(list(st.session_state.all_chats.keys())); st.session_state.all_chats[new_name] = []; st.session_state.active_chat = new_name; logging.info(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç: {new_name}"); save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled); st.rerun()
    if chat_names:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            current_chat_to_delete = st.session_state.active_chat; logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞: {current_chat_to_delete}")
            if current_chat_to_delete in st.session_state.all_chats:
                del st.session_state.all_chats[current_chat_to_delete]; logging.info(f"–ß–∞—Ç —É–¥–∞–ª–µ–Ω."); remaining_chats = list(st.session_state.all_chats.keys())
                if remaining_chats: st.session_state.active_chat = remaining_chats[0]
                else: new_name = generate_new_chat_name([]); st.session_state.all_chats = {new_name: []}; st.session_state.active_chat = new_name; logging.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.")
                save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled); st.rerun()
            else: logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: {current_chat_to_delete}")
    st.divider()
    search_toggled = st.toggle("üåê –í–µ–±-–ø–æ–∏—Å–∫", value=st.session_state.web_search_enabled, key="web_search_toggle")
    if search_toggled != st.session_state.web_search_enabled: st.session_state.web_search_enabled = search_toggled; logging.info(f"–í–µ–±-–ø–æ–∏—Å–∫: {search_toggled}"); save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
    st.divider()
    mode_options = list(MODES.keys())
    try: current_mode_index = mode_options.index(st.session_state.selected_mode)
    except ValueError: logging.warning(f"–†–µ–∂–∏–º '{st.session_state.selected_mode}' –Ω–µ –Ω–∞–π–¥–µ–Ω."); st.session_state.selected_mode = DEFAULT_MODE; current_mode_index = 0
    selected_mode_radio = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index, key="mode_selector")
    if selected_mode_radio is not None and selected_mode_radio != st.session_state.selected_mode: st.session_state.selected_mode = selected_mode_radio; logging.info(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {selected_mode_radio}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
# –í–∞–∂–Ω–æ: –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é, –≤–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ü–û–°–õ–ï rerun
chat_container = st.container()
with chat_container:
    if active_chat_name in st.session_state.all_chats:
        for message in st.session_state.all_chats[active_chat_name]:
            avatar = "üßë‚Äçüíª" if message["role"] == "user" else "üí°"
            with st.chat_message(message["role"], avatar=avatar):
                st.markdown(message["content"], unsafe_allow_html=True)
    else:
        st.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞: {active_chat_name}")

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    if active_chat_name in st.session_state.all_chats:
        logging.info(f"–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ '{active_chat_name}'.")
        # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ rerun
        st.session_state.all_chats[active_chat_name].append({"role": "user", "content": prompt})
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
        st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
    else:
        st.error("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="‚ùå")
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: —á–∞—Ç '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º st.write –∏ –ë–ï–ó rerun –≤ –∫–æ–Ω—Ü–µ) ---
if active_chat_name in st.session_state.all_chats:
    current_chat_state = st.session_state.all_chats[active_chat_name]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞ –∏ –ü–û–°–õ–ï–î–ù–ï–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ rerun, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    if current_chat_state and current_chat_state[-1]["role"] == "user":

        last_user_prompt = current_chat_state[-1]["content"]
        logging.info(f"\n--- –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è '{active_chat_name}' ---")
        logging.info(f"–ü—Ä–æ–º–ø—Ç: '{last_user_prompt[:100]}...' | –ü–æ–∏—Å–∫: {'–í–ö–õ' if st.session_state.web_search_enabled else '–í–´–ö–õ'}")

        current_date = datetime.datetime.now().strftime("%Y-%m-%d")
        # –°–æ–∑–¥–∞–µ–º –ö–û–ü–ò–Æ –∏—Å—Ç–æ—Ä–∏–∏ –ë–ï–ó –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
        # context_for_ai = list(current_chat_state[:-1]) # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω—É–∂–Ω–æ –≤—Å–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_for_ai = list(current_chat_state) # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        needs_search = st.session_state.web_search_enabled
        system_prompt = {"role": "system"}

        # --- –≠—Ç–∞–ø—ã –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω) ---
        # (–õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è system_prompt –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if needs_search:
            logging.info(">>> –í–µ–±-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω.")
            generated_queries = []; search_results_str = "–ü–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è."; search_performed_successfully = False
            try:
                with st.spinner("–ü–æ–¥–±–∏—Ä–∞—é –ø–æ–∏—Å–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã... ü§î"): generated_queries = generate_search_queries(last_user_prompt, current_model_id)
            except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ generate_search_queries: {e}", exc_info=True); st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.", icon="‚ùì")
            queries_to_search = generated_queries if generated_queries else [last_user_prompt]
            if not generated_queries: logging.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            search_spinner_text = f"–ò—â—É –≤ —Å–µ—Ç–∏ ({len(queries_to_search)})... üåê"
            try:
                with st.spinner(search_spinner_text): search_results_str = perform_web_search(queries_to_search)
                if search_results_str and not any(err in search_results_str for err in ["–û—à–∏–±–∫–∞", "–Ω–µ –¥–∞–ª", "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"]): search_performed_successfully = True; logging.info("–í–µ–±-–ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω.")
                else: logging.warning(f"–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ—É–¥–∞—á–µ–Ω/–ø—É—Å—Ç: '{search_results_str}'")
            except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ perform_web_search: {e}", exc_info=True); st.error("–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞.", icon="üï∏Ô∏è"); search_results_str = f"–û—à–∏–±–∫–∞: {e}"

            if search_performed_successfully:
                 system_prompt["content"] = f"""–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –ë—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –≤–µ–±-–ø–æ–∏—Å–∫. **–¢–≤–æ—è –∑–∞–¥–∞—á–∞:** –ò–∑—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ –∏ **—Å–∏–Ω—Ç–µ–∑–∏—Ä—É–π –∏–∑ –Ω–∏—Ö –µ–¥–∏–Ω—ã–π, —Å–≤—è–∑–Ω—ã–π –æ—Ç–≤–µ—Ç** –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø–æ–∏—Å–∫–∞. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Å–∞–º —Ñ–∞–∫—Ç –ø–æ–∏—Å–∫–∞ –∏ –Ω–µ –≤–∫–ª—é—á–∞–π URL.\n\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n{search_results_str}\n--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
                 logging.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.")
            else:
                 system_prompt["content"] = f"""–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –±—ã–ª –≤–∫–ª—é—á–µ–Ω, –Ω–æ **–Ω–µ –¥–∞–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤** (–ü—Ä–∏—á–∏–Ω–∞: '{search_results_str}'). –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, **–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö**. **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**, —á—Ç–æ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º."""
                 logging.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ü–ï–†–ï–î –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ö–û–ü–ò–ò –∏—Å—Ç–æ—Ä–∏–∏
            context_for_ai.insert(-1, system_prompt)
        else: # –ü–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω
            logging.info(">>> –í–µ–±-–ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω.")
            system_prompt["content"] = f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –í–´–ö–õ–Æ–ß–ï–ù. –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö."
            context_for_ai.insert(-1, system_prompt)
            logging.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–æ–∏—Å–∫–∞.")


        # === –ë–õ–û–ö: –°—Ç—Ä–∏–º–∏–Ω–≥ —Å st.write –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
        final_response_to_save = None
        ai_response_error = False # –§–ª–∞–≥ –æ—à–∏–±–∫–∏

        logging.info("–ó–∞–ø—Ä–æ—Å –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò —Å –ø–æ–º–æ—â—å—é st.write...")
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            response_generator = stream_ai_response(current_model_id, context_for_ai)

            # 2. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ
            response_wrapper = StreamWriteWrapper(response_generator)

            # 3. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –ø–æ–º–æ—â—å—é st.write –≤–Ω—É—Ç—Ä–∏ st.chat_message
            # –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç –µ–≥–æ –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            with st.chat_message("assistant", avatar="üí°"):
                st.write(response_wrapper) # Streamlit –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥

            # 4. –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ st.write –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
            final_response_to_save = response_wrapper.full_response
            ai_response_error = response_wrapper.error_occurred # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏ –∏–∑ –æ–±–µ—Ä—Ç–∫–∏

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if ai_response_error:
                 # –û—à–∏–±–∫–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ st.write(wrapper)
                 logging.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ st.write.")
                 # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ st.error, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                 # st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.", icon="üî•")
                 final_response_to_save = None # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            elif not final_response_to_save:
                 logging.warning("–û—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø—É—Å—Ç –ø–æ—Å–ª–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ st.write.")
                 # –ù–µ –≤—ã–≤–æ–¥–∏–º warning –∑–¥–µ—Å—å, —Ç.–∫. –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å
                 pass # –ü—Ä–æ—Å—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            else:
                 logging.info("–û—Ç–≤–µ—Ç –ò–ò —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —á–µ—Ä–µ–∑ st.write –∏ —Å–æ–±—Ä–∞–Ω.")

        except Exception as e:
             # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±–µ—Ä—Ç–∫–∏ –∏–ª–∏ —Å–∞–º–∏–º st.write
             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò —Å st.write: {e}", exc_info=True)
             st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}", icon="üí•")
             final_response_to_save = None
             ai_response_error = True

        # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ë–ï–ó RERUN) ===
        if final_response_to_save and not ai_response_error:
            logging.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é...")
            try:
                if active_chat_name in st.session_state.all_chats:
                     current_history_for_save = st.session_state.all_chats[active_chat_name]
                     # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¢–û–õ–¨–ö–û –ß–¢–û –±—ã–ª–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —á–µ—Ä–µ–∑ st.write
                     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –≤–∞–∂–Ω–∞, —Ç.–∫. reruna –Ω–µ—Ç
                     if not current_history_for_save or current_history_for_save[-1].get("role") != "assistant" or current_history_for_save[-1].get("content") != final_response_to_save:
                          current_history_for_save.append({"role": "assistant", "content": final_response_to_save})
                          save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
                          logging.info("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ session_state –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                          # --- RERUN –ù–ï –ù–£–ñ–ï–ù ---
                     else:
                          logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                else:
                     logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —á–∞—Ç '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                     st.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.", icon="‚ùå")
            except Exception as e:
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
                 st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}", icon="üíæ")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        logging.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è '{active_chat_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
