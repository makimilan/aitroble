# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS (–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã) ---
custom_css = f"""
<style>
    /* --- –ë–∞–∑–æ–≤–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ --- */
    body {{ color: #dcddde; }} /* –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
    .stApp {{ background-color: #36393f; }} /* –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω */

    /* --- –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã --- */
     .main .block-container {{ padding: 1rem 1rem 4rem 1rem !important; }} /* –£–≤–µ–ª–∏—á–∏–ª –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø */

    /* --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ --- */
    .stChatFloatingInputContainer {{ background-color: #40444b !important; border-top: 1px solid #2f3136 !important; }}
    .stChatFloatingInputContainer textarea {{ background-color: #40444b !important; color: #dcddde !important; border: none !important; }}
    .stChatFloatingInputContainer button[data-testid="send-button"] svg {{ fill: #7289da !important; }}

    /* --- *–°–£–ü–ï–† –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï* –°—Ç–∏–ª–∏ —á–∞—Ç–∞ --- */
    [data-testid="stChatMessage"] {{
        background: none !important; /* –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω */
        border: none !important; /* –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É */
        box-shadow: none !important; /* –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω—å */
        padding: 0.25rem 0 !important; /* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã */
        margin-bottom: 0.75rem !important; /* –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ */
        max-width: 100%;
    }}
     /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
     [data-testid="stChatMessage"] > div {{
        display: flex;
        align-items: flex-start; /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏ —Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ö—É */
        gap: 0.75rem; /* –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∞–≤–∞—Ç–∞—Ä–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º */
     }}
     /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */
    [data-testid="stChatMessage"] .stChatMessageContent {{
         background: none !important; /* –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω */
         color: #dcddde !important; /* –Ø—Ä–∫–∏–π —Ç–µ–∫—Å—Ç */
         padding: 0 !important; /* –£–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
    }}
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}

    /* –ê–≤–∞—Ç–∞—Ä—ã */
    [data-testid="chatAvatarIcon-assistant"] svg,
    [data-testid="chatAvatarIcon-user"] svg {{
         color: #7289da; /* –¶–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ */
         width: 1.75rem; /* –£–≤–µ–ª–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ */
         height: 1.75rem;
         margin-top: 2px; /* –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */
    }}

    /* --- –¢–µ–º–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) --- */
    [data-testid="stChatMessage"] code {{ background-color: #282c34; color: #abb2bf; padding: 0.15em 0.4em; border-radius: 3px; font-size: 0.9em; word-wrap: break-word; }}
    [data-testid="stChatMessage"] pre {{ background-color: #282c34; border: 1px solid #3b4048; border-radius: 5px; padding: 12px; overflow-x: auto; font-size: 0.9em; }}
    [data-testid="stChatMessage"] pre code {{ background-color: transparent; color: #abb2bf; padding: 0; font-size: inherit; border-radius: 0; }}

    /* --- –°—Ç–∏–ª–∏ –°–∞–π–¥–±–∞—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) --- */
    [data-testid="stSidebar"] {{ background-color: #2f3136; padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.5rem; color: #ffffff; }}
    [data-testid="stSidebar"] .stButton button {{ border-radius: 5px; width: 100%; margin-bottom: 0.5rem; background-color: #40444b; border: none; color: #dcddde; }}
    [data-testid="stSidebar"] .stButton button:hover {{ background-color: #4f545c; }}
    div[data-testid="stSidebar"] div[role="radiogroup"] > label {{ display: block; padding: 8px 12px; border-radius: 5px; margin-bottom: 5px; cursor: pointer; transition: background-color 0.2s ease; border: 1px solid transparent; color: #b9bbbe; }}
    div[data-testid="stSidebar"] div[role="radiogroup"] > label:hover {{ background-color: rgba(255, 255, 255, 0.05); }}
    div[data-testid="stSidebar"] div[role="radiogroup"] input[type="radio"]:checked + label {{ background-color: #3a3d43; border: 1px solid #3a3d43; font-weight: 500; color: #ffffff; }}
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ color: #b9bbbe; font-size: 0.9rem; margin-bottom: 0.3rem; }}

</style>
"""

# --- –í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ Python –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

# ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ Python –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...

# –í–æ—Ç –æ–Ω –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã:
# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç OPENROUTER_API_KEY –¥–æ–±–∞–≤–ª–µ–Ω –≤ Streamlit Cloud
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v6" # –ö–ª—é—á –¥–ª—è localStorage
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ß–∞—Ç —Å –ò–ò",
    page_icon="üí¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS (–í–°–¢–ê–í–¨–¢–ï –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –°–Æ–î–ê) ---
# custom_css = f""" ... """ # <--- –°—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è CSS –≤—ã—à–µ
st.markdown(custom_css, unsafe_allow_html=True)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                return data["chats"], data["active_chat"]
        except json.JSONDecodeError: pass
    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"
    default_chats = {first_chat_name: []}
    return default_chats, first_chat_name

def save_all_chats(chats_dict, active_chat_name):
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        data_to_save = {"chats": chats_dict, "active_chat": active_chat_name}
        try:
            localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e: return False
    return False

def generate_new_chat_name(existing_names):
    i = 1
    while f"{DEFAULT_CHAT_NAME} {i}" in existing_names: i += 1
    return f"{DEFAULT_CHAT_NAME} {i}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "all_chats" not in st.session_state:
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
    if st.session_state.active_chat not in st.session_state.all_chats:
        if st.session_state.all_chats:
            st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]
        else:
            new_name = generate_new_chat_name([])
            st.session_state.all_chats = {new_name: []}
            st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
if "selected_mode" not in st.session_state:
    st.session_state.selected_mode = DEFAULT_MODE

# --- –°–∞–π–¥–±–∞—Ä: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ –∏ —Ä–µ–∂–∏–º–æ–º ---
with st.sidebar:
    st.markdown("## üí¨ –ß–∞—Ç—ã")
    chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(st.session_state.active_chat)
    except ValueError: active_chat_index = 0

    selected_chat = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", options=chat_names, index=active_chat_index,
        label_visibility="collapsed", key="chat_selector"
    )

    if selected_chat != st.session_state.active_chat:
        st.session_state.active_chat = selected_chat
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    st.divider()

    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"):
        new_name = generate_new_chat_name(chat_names)
        st.session_state.all_chats[new_name] = []
        st.session_state.active_chat = new_name
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    if len(chat_names) > 0:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            if st.session_state.active_chat in st.session_state.all_chats:
                del st.session_state.all_chats[st.session_state.active_chat]
                remaining_chats = list(st.session_state.all_chats.keys())
                if remaining_chats: st.session_state.active_chat = remaining_chats[0]
                else:
                    new_name = generate_new_chat_name([])
                    st.session_state.all_chats = {new_name: []}
                    st.session_state.active_chat = new_name
                save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
                st.rerun()

    st.divider()

    mode_options = list(MODES.keys())
    try: current_mode_index = mode_options.index(st.session_state.selected_mode)
    except ValueError: current_mode_index = 0

    selected_mode_radio = st.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index,
        key="mode_selector"
    )
    if selected_mode_radio != st.session_state.selected_mode:
        st.session_state.selected_mode = selected_mode_radio
        st.rerun()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

current_messages = st.session_state.all_chats.get(st.session_state.active_chat, [])
if not current_messages:
     current_messages.append(
         {"role": "assistant", "content": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø {current_mode_name}. –ù–∞—á–Ω–µ–º –Ω–æ–≤—ã–π —á–∞—Ç!"}
     )
     st.session_state.all_chats[st.session_state.active_chat] = current_messages
     save_all_chats(st.session_state.all_chats, st.session_state.active_chat)

chat_display_container = st.container()
with chat_display_container:
    for message in current_messages:
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "üê≥"
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"])

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id_func, chat_history_func):
    try:
        if "OPENROUTER_API_KEY" not in st.secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="üö®")
             yield None; return
        api_key_from_secrets = st.secrets["OPENROUTER_API_KEY"]
        if not api_key_from_secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –ø—É—Å—Ç–æ–π.", icon="üö®")
             yield None; return
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º: {e}", icon="üí•")
        yield None; return

    headers = {"Authorization": f"Bearer {api_key_from_secrets}", "Content-Type": "application/json"}
    if not isinstance(chat_history_func, list): yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=90)
        response.raise_for_status()
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta_content = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                        if delta_content: yield delta_content
                    except: continue
    except requests.exceptions.RequestException as e: yield None
    except Exception as e: yield None

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    active_chat_name = st.session_state.active_chat
    active_chat_history = st.session_state.all_chats.get(active_chat_name, [])
    active_chat_history.append({"role": "user", "content": prompt})
    st.session_state.all_chats[active_chat_name] = active_chat_history
    save_all_chats(st.session_state.all_chats, active_chat_name)
    st.rerun()

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–ø–æ—Å–ª–µ rerun) ---
active_chat_history = st.session_state.all_chats.get(st.session_state.active_chat, [])
if active_chat_history and active_chat_history[-1]["role"] == "user":
     with chat_display_container:
         with st.chat_message("assistant", avatar="üê≥"):
             full_response = st.write_stream(stream_ai_response(current_model_id, active_chat_history))

     if full_response:
         active_chat_history.append({"role": "assistant", "content": full_response})
         st.session_state.all_chats[active_chat_name] = active_chat_history
         save_all_chats(st.session_state.all_chats, active_chat_name)
         # st.rerun() –Ω–µ –Ω—É–∂–µ–Ω

# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
