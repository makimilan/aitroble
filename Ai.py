# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage
from duckduckgo_search import DDGS
import traceback
import re

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v11" # –ù–æ–≤—ã–π –∫–ª—é—á
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"
MAX_SEARCH_RESULTS_PER_QUERY = 5 # –°–Ω–∏–∑–∏–º –Ω–µ–º–Ω–æ–≥–æ, —Ç.–∫. –ø–æ–∏—Å–∫ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω
MAX_QUERIES_TO_GENERATE = 3       # –°–Ω–∏–∑–∏–º –Ω–µ–º–Ω–æ–≥–æ
MAX_SNIPPET_LENGTH = 250

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–£–º–Ω—ã–π –ß–∞—Ç –ò–ò",
    page_icon="üß†", # –í–µ—Ä–Ω–µ–º –∏–∫–æ–Ω–∫—É
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
custom_css = f"""
<style>
    /* ... (–≤–∞—à CSS –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */
     .main .block-container {{ padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem; }}
    [data-testid="stChatMessage"] {{ background: none !important; border: none !important; box-shadow: none !important; padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important; }}
    [data-testid="stChatMessage"] > div {{ gap: 0.75rem; }}
    [data-testid="stChatMessage"] .stChatMessageContent {{ padding: 0 !important; }}
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    # ... (–∫–æ–¥ load_all_chats –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                for chat_name, history in data["chats"].items():
                    if not isinstance(history, list): data["chats"][chat_name] = []
                    else: data["chats"][chat_name] = [msg for msg in history if isinstance(msg, dict) and "role" in msg and "content" in msg and msg["content"]]
                if data["active_chat"] not in data["chats"]: data["active_chat"] = list(data["chats"].keys())[0] if data["chats"] else None
                if data["active_chat"] is None: raise ValueError("No active chat found after loading.")
                return data["chats"], data["active_chat"]
        except Exception as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}.")
    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"
    default_chats = {first_chat_name: []}
    return default_chats, first_chat_name

def save_all_chats(chats_dict, active_chat_name):
    # ... (–∫–æ–¥ save_all_chats –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        cleaned_chats = {}
        for name, history in chats_dict.items():
            if isinstance(history, list): cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and "role" in msg and "content" in msg and msg["content"]]
            else: cleaned_chats[name] = []
        if active_chat_name not in cleaned_chats: active_chat_name = list(cleaned_chats.keys())[0] if cleaned_chats else None
        if active_chat_name is None: return False
        data_to_save = {"chats": cleaned_chats, "active_chat": active_chat_name}
        try: localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}"); return False
    return False

def generate_new_chat_name(existing_names):
    # ... (–∫–æ–¥ generate_new_chat_name –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    i = 1; base_name = DEFAULT_CHAT_NAME
    while f"{base_name} {i}" in existing_names: i += 1
    return f"{base_name} {i}"

# --- –ù–û–í–ê–Ø –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ ---
def should_perform_search(user_prompt, model_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ."); return False # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ –∏—Å–∫–∞—Ç—å

    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Referer/Title, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # "HTTP-Referer": "...", "X-Title": "..."

    # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –î–ê/–ù–ï–¢
    decision_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢—Ä–µ–±—É–µ—Ç –ª–∏ –æ–Ω –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤–æ—Å—Ç–∏, —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –ø–æ—Å–ª–µ 2023 –≥–æ–¥–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)? –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –î–ê –∏–ª–∏ –ù–ï–¢.

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_prompt}"

–û—Ç–≤–µ—Ç (–î–ê –∏–ª–∏ –ù–ï–¢):"""

    payload = {
        "model": model_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        "messages": [{"role": "user", "content": decision_prompt}],
        "max_tokens": 5, # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è "–î–ê" –∏–ª–∏ "–ù–ï–¢"
        "temperature": 0.1, # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    }

    try:
        print(f"–†–µ—à–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –¥–ª—è: '{user_prompt[:50]}...'")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=15) # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
        response.raise_for_status()
        data = response.json()
        decision = data.get("choices", [{}])[0].get("message", {}).get("content", "").strip().upper()
        print(f"  –†–µ—à–µ–Ω–∏–µ –ò–ò: {decision}")
        return decision == "–î–ê" # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç "–î–ê"
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ: {e}")
        return False # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –Ω–µ –∏—Å–∫–∞—Ç—å

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def generate_search_queries(user_prompt, model_id):
    # ... (–∫–æ–¥ generate_search_queries –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."); return []
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json", "HTTP-Referer": "http://localhost:8501", "X-Title": "Streamlit Smart Chat AI"}
    generation_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–æ {MAX_QUERIES_TO_GENERATE} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Å–∞–º—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ –∑–∞–ø—Ä–æ—Å—ã, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏. –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_prompt}" –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:"""
    payload = {"model": model_id, "messages": [{"role": "user", "content": generation_prompt}], "max_tokens": 100, "temperature": 0.3}
    generated_queries = []
    try:
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è: '{user_prompt[:50]}...'")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status(); data = response.json()
        raw_queries = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        if raw_queries:
            queries = [q.strip() for q in raw_queries.split('\n') if q.strip()]
            queries = [re.sub(r"^\s*[\d\.\-\*]+\s*", "", q) for q in queries]
            generated_queries = [q for q in queries if q]; print(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {generated_queries}")
    except Exception as e: print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
    return generated_queries[:MAX_QUERIES_TO_GENERATE]


# --- –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤—Å–µ –µ—â–µ –±–µ–∑ —Å—Å—ã–ª–æ–∫) ---
def perform_web_search(queries: list, max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY):
    # ... (–∫–æ–¥ perform_web_search –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    all_results_text = ""
    if not queries: return "–ù–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
    print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º ({len(queries)} —à—Ç.)...")
    aggregated_results = []
    try:
        with DDGS(timeout=25) as ddgs:
            for query_idx, query in enumerate(queries, 1):
                print(f"  –ó–∞–ø—Ä–æ—Å {query_idx}/{len(queries)}: '{query}'...")
                try:
                    search_results = list(ddgs.text(query, max_results=max_results_per_query))
                    if search_results: aggregated_results.extend(search_results); print(f"    –ù–∞–π–¥–µ–Ω–æ {len(search_results)}.")
                    else: print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                except Exception as e_inner: print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{query}': {e_inner}")
        if aggregated_results:
            unique_results = {result.get('body', ''): result for result in aggregated_results if result.get('body')}.values()
            print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(unique_results)}")
            if unique_results:
                 all_results_text += "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n"
                 for i, result in enumerate(unique_results, 1):
                    title = result.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                    body = result.get('body', '')
                    body_short = (body[:MAX_SNIPPET_LENGTH] + '...') if len(body) > MAX_SNIPPET_LENGTH else body
                    all_results_text += f"{i}. {title}: {body_short}\n"
            else: all_results_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        else: all_results_text = "–ü–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        return all_results_text.strip()
    except Exception as e: print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}"); return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫."


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if "all_chats" not in st.session_state:
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
if "selected_mode" not in st.session_state:
    st.session_state.selected_mode = DEFAULT_MODE

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
active_chat_name = st.session_state.active_chat
# –£–ë–ò–†–ê–ï–ú –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# active_chat_history = list(st.session_state.all_chats.get(active_chat_name, []))

# --- –°–∞–π–¥–±–∞—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
with st.sidebar:
    # ... (–∫–æ–¥ —Å–∞–π–¥–±–∞—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    st.markdown("## üí¨ –ß–∞—Ç—ã")
    chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(active_chat_name)
    except ValueError: active_chat_index = 0 if chat_names else -1
    if active_chat_index != -1:
         selected_chat = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", options=chat_names, index=active_chat_index, label_visibility="collapsed", key="chat_selector")
         if selected_chat != active_chat_name: st.session_state.active_chat = selected_chat; save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    else: st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.")
    st.divider()
    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"): new_name = generate_new_chat_name(list(st.session_state.all_chats.keys())); st.session_state.all_chats[new_name] = []; st.session_state.active_chat = new_name; save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    if len(chat_names) > 0 and active_chat_index != -1:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            current_active_chat_to_delete = st.session_state.active_chat
            if current_active_chat_to_delete in st.session_state.all_chats:
                del st.session_state.all_chats[current_active_chat_to_delete]
                remaining_chats = list(st.session_state.all_chats.keys())
                st.session_state.active_chat = remaining_chats[0] if remaining_chats else None
                if not st.session_state.active_chat: new_name = generate_new_chat_name([]); st.session_state.all_chats = {new_name: []}; st.session_state.active_chat = new_name
                save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    st.divider()
    mode_options = list(MODES.keys()); current_mode_index = mode_options.index(st.session_state.selected_mode) if st.session_state.selected_mode in mode_options else 0
    selected_mode_radio = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index, key="mode_selector")
    if selected_mode_radio != st.session_state.selected_mode: st.session_state.selected_mode = selected_mode_radio; st.rerun()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# –£–ë–ò–†–ê–ï–ú –ë–õ–û–ö –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
# if not active_chat_history and active_chat_name in st.session_state.all_chats:
#      welcome_message = {"role": "assistant", "content": f"..."}
#      ...

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞
chat_display_container = st.container()
with chat_display_container:
    # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    current_display_history = list(st.session_state.all_chats.get(active_chat_name, []))
    for message in current_display_history:
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "üß†" # –ò–∫–æ–Ω–∫–∞ –ò–ò
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"], unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id_func, chat_history_func):
    # ... (–∫–æ–¥ stream_ai_response –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="üö®"); yield None; return
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json", "HTTP-Referer": "http://localhost:8501", "X-Title": "Streamlit Smart Chat AI"}
    if not isinstance(chat_history_func, list): print("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ —Å–ø–∏—Å–æ–∫."); yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}
    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=180)
        response.raise_for_status(); has_content = False
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta = chunk.get("choices", [{}])[0].get("delta", {})
                        if delta and "content" in delta:
                             delta_content = delta["content"]
                             if delta_content: has_content = True; yield delta_content
                    except Exception as e: print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e}"); continue
        if not has_content: print("–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    except requests.exceptions.Timeout: st.error("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.", icon="‚è±Ô∏è"); print("–¢–∞–π–º–∞—É—Ç API."); yield None
    except requests.exceptions.RequestException as e: st.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", icon="üíî"); print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"); yield None
    except Exception as e: st.error(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}", icon="üî•"); print(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}"); yield None


# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    if active_chat_name in st.session_state.all_chats:
        st.session_state.all_chats[active_chat_name].append({"role": "user", "content": prompt})
        save_all_chats(st.session_state.all_chats, active_chat_name)
        st.rerun()
    else: st.error("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# --- –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò ---
current_chat_state = st.session_state.all_chats.get(active_chat_name, [])
if current_chat_state and current_chat_state[-1]["role"] == "user":

    last_user_prompt = current_chat_state[-1]["content"]
    print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: '{last_user_prompt[:100]}...' ---")
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")

    # --- –≠—Ç–∞–ø 0: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ ---
    needs_search = False
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å... ü§î"):
        needs_search = should_perform_search(last_user_prompt, current_model_id)

    search_results_str = ""
    context_for_final_answer = list(current_chat_state) # –ë–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é

    if needs_search:
        print(">>> –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫.")
        # --- –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
        generated_queries = []
        with st.spinner("–î—É–º–∞—é, –∫–∞–∫ –ª—É—á—à–µ –ø–æ–∏—Å–∫–∞—Ç—å... üßê"):
            generated_queries = generate_search_queries(last_user_prompt, current_model_id)

        # --- –≠—Ç–∞–ø 2: –í–µ–±-–ø–æ–∏—Å–∫ ---
        if generated_queries:
            with st.spinner(f"–ò—â—É –≤ —Å–µ—Ç–∏ –ø–æ {len(generated_queries)} –∑–∞–ø—Ä–æ—Å–∞–º... üåê"):
                search_results_str = perform_web_search(generated_queries)
        else:
            print("–ò–ò –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É.")
            with st.spinner("–ò—â—É –≤ —Å–µ—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É... üåê"):
                 search_results_str = perform_web_search([last_user_prompt], max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY)

        # --- –≠—Ç–∞–ø 3 (–¥–ª—è —Å–ª—É—á–∞—è —Å –ø–æ–∏—Å–∫–æ–º): –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---
        is_search_successful = not ("–ù–µ —É–¥–∞–ª–æ—Å—å" in search_results_str or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in search_results_str or "–ù–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ" in search_results_str)

        if is_search_successful and search_results_str:
            # –ü—Ä–æ–º–ø—Ç, –£–ß–ò–¢–´–í–ê–Æ–©–ò–ô –ü–û–ò–°–ö
            search_context_message = {
                "role": "system",
                "content": (
                    f"–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è {current_date}. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –≤–µ–±-–ø–æ–∏—Å–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ. "
                    f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏ –ê–ö–¢–£–ê–õ–¨–ù–´–ô –æ—Ç–≤–µ—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ü–†–ï–ñ–î–ï –í–°–ï–ì–û –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
                    f"{search_results_str}\n--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---\n\n"
                    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ò–ò:\n"
                    "1.  **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–º–µ–µ—Ç –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è —Ñ–∞–∫—Ç–æ–≤, –¥–∞—Ç, —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.\n"
                    "2.  **–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å:** –û—Ç–≤–µ—Ç –î–û–õ–ñ–ï–ù –æ—Ç—Ä–∞–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {current_date}.\n"
                    "3.  **–°–∏–Ω—Ç–µ–∑:** –°–∏–Ω—Ç–µ–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –†–ê–ó–ù–´–• —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –¥–ª—è —Å–≤—è–∑–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å.\n"
                    "4.  **–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ:** –ò–≥–Ω–æ—Ä–∏—Ä—É–π –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–µ–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n"
                    "5.  **–ë–µ–∑ —Å—Å—ã–ª–æ–∫:** –ù–µ –≤–∫–ª—é—á–∞–π –≤ –æ—Ç–≤–µ—Ç URL.\n\n"
                    "–¢–µ–ø–µ—Ä—å, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
            }
            context_for_final_answer.insert(-1, search_context_message)
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ–º–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
        else: # –ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª
             fallback_context_message = {
                "role": "system",
                 "content": f"(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í–µ–±-–ø–æ–∏—Å–∫ –±—ã–ª –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({search_results_str}). –°–µ–≥–æ–¥–Ω—è {current_date}. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.)"
             }
             context_for_final_answer.insert(-1, fallback_context_message)
             print("–í –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")

    else: # needs_search == False
        print(">>> –í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        # --- –≠—Ç–∞–ø 3 (–¥–ª—è —Å–ª—É—á–∞—è –ë–ï–ó –ø–æ–∏—Å–∫–∞): –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---
        no_search_context_message = {
            "role": "system",
            "content": f"–°–µ–≥–æ–¥–Ω—è {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö."
        }
        context_for_final_answer.insert(-1, no_search_context_message)
        print("–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –ø–æ–∏—Å–∫–∞.")


    # --- –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---
    with chat_display_container:
        with st.chat_message("assistant", avatar="üß†"):
            print("–ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É –ò–ò...")
            spinner_message = "–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
            if needs_search and search_results_str and is_search_successful:
                 spinner_message = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç... ‚úçÔ∏è"
            elif needs_search:
                 spinner_message = "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ñ–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç... ü§î"

            with st.spinner(spinner_message):
                 response_generator = stream_ai_response(current_model_id, context_for_final_answer)
                 full_response = st.write_stream(response_generator)
            print("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.")

    # --- –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
    if full_response:
        if active_chat_name in st.session_state.all_chats:
             st.session_state.all_chats[active_chat_name].append({"role": "assistant", "content": full_response})
             save_all_chats(st.session_state.all_chats, active_chat_name)
             print("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        else: print("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏—Å—á–µ–∑ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞.")
    else: print("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—É—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")


# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
