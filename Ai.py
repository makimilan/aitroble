# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage
from duckduckgo_search import DDGS
import traceback
import re

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v14" # –ö–ª—é—á –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"
MAX_SEARCH_RESULTS_PER_QUERY = 5
MAX_QUERIES_TO_GENERATE = 3
MAX_SNIPPET_LENGTH = 250

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ß–∞—Ç –ò–ò —Å –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º –ü–æ–∏—Å–∫–∞", page_icon="üí°", layout="wide", initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
custom_css = f"""
<style>
    /* ... –≤–∞—à CSS ... */
     .main .block-container {{ padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem; }}
    [data-testid="stChatMessage"] {{ background: none !important; border: none !important; box-shadow: none !important; padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important; }}
    [data-testid="stChatMessage"] > div {{ gap: 0.75rem; }}
    [data-testid="stChatMessage"] .stChatMessageContent {{ padding: 0 !important; }}
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}
    [data-testid="stSidebar"] [data-testid="stToggle"] label {{ font-size: 0.95rem; font-weight: bold; }}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    # ... (–∫–æ–¥ load_all_chats) ...
    data_str = localS.getItem(LOCAL_STORAGE_KEY); default_chats = {f"{DEFAULT_CHAT_NAME} 1": []}; default_name = f"{DEFAULT_CHAT_NAME} 1"
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                for name, history in data["chats"].items(): data["chats"][name] = [msg for msg in history if isinstance(msg, dict) and msg.get("role") and msg.get("content")] if isinstance(history, list) else []
                if not data["chats"]: st.session_state.web_search_enabled = False; return default_chats, default_name # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö —á–∞—Ç–∞—Ö
                if data["active_chat"] not in data["chats"]: data["active_chat"] = list(data["chats"].keys())[0]
                st.session_state.web_search_enabled = data.get("web_search_enabled", False) # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
                return data["chats"], data["active_chat"]
        except Exception as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}.")
    st.session_state.web_search_enabled = False # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ/–ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    return default_chats, default_name

def save_all_chats(chats_dict, active_chat_name, web_search_state):
    # ... (–∫–æ–¥ save_all_chats —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º web_search_state) ...
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        cleaned_chats = {}
        for name, history in chats_dict.items(): cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and msg.get("role") and msg.get("content")] if isinstance(history, list) else []
        if not cleaned_chats: active_chat_name = None
        elif active_chat_name not in cleaned_chats: active_chat_name = list(cleaned_chats.keys())[0] if cleaned_chats else None
        if active_chat_name is None and cleaned_chats: active_chat_name = list(cleaned_chats.keys())[0]
        data_to_save = {"chats": cleaned_chats, "active_chat": active_chat_name, "web_search_enabled": web_search_state}
        try: localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"); return False
    return False

def generate_new_chat_name(existing_names):
    # ... (–∫–æ–¥ generate_new_chat_name) ...
    i = 1; base_name = DEFAULT_CHAT_NAME
    while f"{base_name} {i}" in existing_names: i += 1
    return f"{base_name} {i}"

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def generate_search_queries(user_prompt, model_id):
    # ... (–∫–æ–¥ generate_search_queries) ...
    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."); return []
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json", "HTTP-Referer": "http://localhost:8501", "X-Title": "Streamlit Toggle Search Chat AI"}
    generation_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–æ {MAX_QUERIES_TO_GENERATE} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –ó–∞–ø—Ä–æ—Å: "{user_prompt}" –ó–∞–ø—Ä–æ—Å—ã:"""
    payload = {"model": model_id, "messages": [{"role": "user", "content": generation_prompt}], "max_tokens": 100, "temperature": 0.3}
    generated_queries = []
    try:
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è: '{user_prompt[:50]}...'"); response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status(); data = response.json(); raw_queries = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        if raw_queries:
            queries = [re.sub(r"^\s*[\d\.\-\*]+\s*", "", q.strip()) for q in raw_queries.split('\n') if q.strip()]
            generated_queries = [q for q in queries if q]; print(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_queries}")
    except Exception as e: print(f"  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
    return generated_queries[:MAX_QUERIES_TO_GENERATE]

# --- –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def perform_web_search(queries: list, max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY):
    # ... (–∫–æ–¥ perform_web_search) ...
    all_results_text = ""; aggregated_results = []
    if not queries: return "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞."
    print(f"–ü–æ–∏—Å–∫ –ø–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–∞–º...");
    try:
        with DDGS(timeout=25) as ddgs:
            for idx, query in enumerate(queries, 1): print(f"  –ó–∞–ø—Ä–æ—Å {idx}/{len(queries)}: '{query}'..."); search_results = list(ddgs.text(query, max_results=max_results_per_query)); aggregated_results.extend(search_results)
        if aggregated_results:
            unique_results = {res.get('body', ''): res for res in aggregated_results if res.get('body')}.values(); print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(unique_results)}")
            if unique_results:
                 all_results_text += "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n"; [all_results_text := all_results_text + f"{i}. {res.get('title', '')}: {(res.get('body', '')[:MAX_SNIPPET_LENGTH] + '...') if len(res.get('body', '')) > MAX_SNIPPET_LENGTH else res.get('body', '')}\n" for i, res in enumerate(unique_results, 1)]
            else: all_results_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        else: all_results_text = "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        return all_results_text.strip()
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}"); return "–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞."

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id_func, chat_history_func):
    # ... (–∫–æ–¥ stream_ai_response) ...
    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: st.error("‚õî API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="üö®"); yield None; return
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json", "HTTP-Referer": "http://localhost:8501", "X-Title": "Streamlit Toggle Search Chat AI"}
    if not isinstance(chat_history_func, list): yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}
    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=180)
        response.raise_for_status(); has_content = False
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]; chunk = json.loads(json_data)
                        if json_data.strip() == "[DONE]": break
                        delta = chunk.get("choices", [{}])[0].get("delta", {})
                        if delta and "content" in delta: delta_content = delta["content"]; has_content = True; yield delta_content
                    except Exception as e: print(f"–û—à–∏–±–∫–∞ —á–∞–Ω–∫–∞: {e}"); continue
        if not has_content: print("–°—Ç—Ä–∏–º–∏–Ω–≥ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}"); yield None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "all_chats" not in st.session_state: st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
if "selected_mode" not in st.session_state: st.session_state.selected_mode = DEFAULT_MODE
if "web_search_enabled" not in st.session_state: st.session_state.web_search_enabled = False

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ---
if st.session_state.active_chat not in st.session_state.all_chats:
    if st.session_state.all_chats: st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]
    else:
        new_name = generate_new_chat_name([]); st.session_state.all_chats[new_name] = []; st.session_state.active_chat = new_name
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
active_chat_name = st.session_state.active_chat

# --- –°–∞–π–¥–±–∞—Ä ---
with st.sidebar:
    st.markdown("## üí¨ –ß–∞—Ç—ã")
    chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(active_chat_name) if active_chat_name in chat_names else (0 if chat_names else -1)
    except ValueError: active_chat_index = 0 if chat_names else -1

    if active_chat_index != -1:
        selected_chat = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", options=chat_names, index=active_chat_index, label_visibility="collapsed", key="chat_selector")
        if selected_chat is not None and selected_chat != active_chat_name:
            st.session_state.active_chat = selected_chat
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
            st.rerun()
    else: st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.")

    st.divider()
    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"):
        new_name = generate_new_chat_name(list(st.session_state.all_chats.keys())); st.session_state.all_chats[new_name] = []; st.session_state.active_chat = new_name
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
        st.rerun()

    if len(chat_names) > 0 and active_chat_index != -1:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            current_chat_to_delete = st.session_state.active_chat
            if current_chat_to_delete in st.session_state.all_chats: del st.session_state.all_chats[current_chat_to_delete]; remaining_chats = list(st.session_state.all_chats.keys());
            st.session_state.active_chat = remaining_chats[0] if remaining_chats else None
            if not st.session_state.active_chat: new_name = generate_new_chat_name([]); st.session_state.all_chats = {new_name: []}; st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
            st.rerun()

    st.divider()
    search_toggled = st.toggle("üåê –í–µ–±-–ø–æ–∏—Å–∫", value=st.session_state.web_search_enabled, key="web_search_toggle")
    if search_toggled != st.session_state.web_search_enabled:
        st.session_state.web_search_enabled = search_toggled
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
        st.rerun()

    st.divider()
    mode_options = list(MODES.keys()); current_mode_index = mode_options.index(st.session_state.selected_mode) if st.session_state.selected_mode in mode_options else 0
    selected_mode_radio = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index, key="mode_selector")
    if selected_mode_radio is not None and selected_mode_radio != st.session_state.selected_mode: st.session_state.selected_mode = selected_mode_radio; st.rerun()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞ (–ø–µ—Ä–µ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)
chat_display_container = st.container()
with chat_display_container:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
    if active_chat_name in st.session_state.all_chats:
        current_display_history = list(st.session_state.all_chats[active_chat_name])
        for message in current_display_history:
            avatar = "üßë‚Äçüíª" if message["role"] == "user" else "üí°"
            with st.chat_message(message["role"], avatar=avatar):
                st.markdown(message["content"], unsafe_allow_html=True)
    else:
        st.warning("–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.") # –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —á–∞—Ç –ø—Ä–æ–ø–∞–ª

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    if active_chat_name in st.session_state.all_chats:
        st.session_state.all_chats[active_chat_name].append({"role": "user", "content": prompt})
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
        st.rerun()
    else: st.error("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.")


# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–£–ü–†–û–©–ï–ù–ù–ê–Ø) ---
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
if active_chat_name in st.session_state.all_chats:
    current_chat_state = st.session_state.all_chats[active_chat_name]

    # –í—ã–ø–æ–ª–Ω—è–µ–º, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_chat_state and current_chat_state[-1]["role"] == "user":

        last_user_prompt = current_chat_state[-1]["content"]
        print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞: '{last_user_prompt[:100]}...' | –ü–æ–∏—Å–∫: {'–í–ö–õ' if st.session_state.web_search_enabled else '–í–´–ö–õ'} ---")
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")

        search_results_str = ""
        context_for_ai = list(current_chat_state)
        needs_search = st.session_state.web_search_enabled

        # --- –≠—Ç–∞–ø—ã –ø–æ–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ needs_search == True) ---
        if needs_search:
            print(">>> –í–µ–±-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω.")
            generated_queries = []
            with st.spinner("–ü–æ–¥–±–∏—Ä–∞—é –∑–∞–ø—Ä–æ—Å—ã... üßê"): generated_queries = generate_search_queries(last_user_prompt, current_model_id)

            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö
            if generated_queries:
                with st.spinner(f"–ò—â—É –≤ —Å–µ—Ç–∏... üåê"):
                    search_results_str = perform_web_search(generated_queries)
            else:
                print("–ó–∞–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É.")
                # –í—ã–Ω–æ—Å–∏–º st.spinner –Ω–∞—Ä—É–∂—É
                with st.spinner("–ò—â—É –≤ —Å–µ—Ç–∏... üåê"):
                    search_results_str = perform_web_search([last_user_prompt], max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY)
            # –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê

            is_search_successful = not ("–û—à–∏–±–∫–∞" in search_results_str or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in search_results_str or "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in search_results_str)
            system_prompt = {"role": "system"}
            if is_search_successful and search_results_str:
                 system_prompt["content"] = f"–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –í–ö–õ–Æ–ß–ï–ù. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –∫–∞–∫ –û–°–ù–û–í–ù–û–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n\n{search_results_str}\n--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞ > —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –°–∏–Ω—Ç–µ–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç. –ë–µ–∑ —Å—Å—ã–ª–æ–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                 print("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                 system_prompt["content"] = f"(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í–µ–±-–ø–æ–∏—Å–∫ –í–ö–õ–Æ–ß–ï–ù, –Ω–æ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({search_results_str}). –°–µ–≥–æ–¥–Ω—è {current_date}. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–Ω–∏–π, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –æ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.)"
                 print("–î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")
            context_for_ai.insert(-1, system_prompt)

        else: # needs_search == False
            print(">>> –í–µ–±-–ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω.")
            system_prompt = {"role": "system", "content": f"–°–µ–≥–æ–¥–Ω—è {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –í–´–ö–õ–Æ–ß–ï–ù. –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö."}
            context_for_ai.insert(-1, system_prompt)
            print("–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–æ–∏—Å–∫–∞.")

        # --- –ï–î–ò–ù–´–ô –≤—ã–∑–æ–≤ –ò–ò —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º ---
        final_response_to_save = None
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –°–†–ê–ó–£, —á—Ç–æ–±—ã —Å—Ç—Ä–∏–º–∏–Ω–≥ —à–µ–ª –≤ –Ω–µ–≥–æ
        with st.chat_message("assistant", avatar="üí°"):
            placeholder = st.empty() # –°–æ–∑–¥–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            spinner_message = "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
            if needs_search: spinner_message = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–µ–±-–¥–∞–Ω–Ω—ã–µ..." if is_search_successful and search_results_str else "–ü–æ–∏—Å–∫ –Ω–µ –ø–æ–º–æ–≥, –æ—Ç–≤–µ—á–∞—é..."
            print("–ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...");
            with placeholder.container(), st.spinner(spinner_message): # –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder
                 response_generator = stream_ai_response(current_model_id, context_for_ai)
                 # –ü–∏—à–µ–º —Å—Ç—Ä–∏–º –≤ placeholder
                 full_response_chunks = []
                 for chunk in response_generator:
                      if chunk:
                           full_response_chunks.append(chunk)
                           placeholder.markdown("".join(full_response_chunks) + "‚ñå") # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
                 final_response_to_save = "".join(full_response_chunks)
                 if final_response_to_save:
                      placeholder.markdown(final_response_to_save) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
                 else:
                      placeholder.markdown("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.") # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π
            print("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.")

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
        if final_response_to_save:
            if active_chat_name in st.session_state.all_chats:
                 current_history_for_save = st.session_state.all_chats[active_chat_name]
                 # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–∂–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                 if not current_history_for_save or current_history_for_save[-1].get("role") != "assistant" or current_history_for_save[-1].get("content") != final_response_to_save:
                      current_history_for_save.append({"role": "assistant", "content": final_response_to_save})
                      save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
                      print("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                 else: print("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            else: print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —á–∞—Ç –∏—Å—á–µ–∑.")
        else: print("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

        print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        # –ù–ï rerun() –≤ –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
