# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
from duckduckgo_search import DDGS
import traceback
import re
import logging
from html import unescape
from typing import List, Dict, Optional, Any, Tuple, Generator

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(funcName)s] - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit ---
OPENROUTER_API_KEY = st.secrets.get("OPENROUTER_API_KEY")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# API –∏ –º–æ–¥–µ–ª–∏ (–í–û–ó–í–†–ê–©–ï–ù–´ –ö –í–ê–®–ï–ú–£ –û–†–ò–ì–ò–ù–ê–õ–£)
OPENROUTER_API_URL: str = "https://openrouter.ai/api/v1/chat/completions"
MODES: Dict[str, str] = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE: str = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)" # –í–æ–∑–≤—Ä–∞—â–µ–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∂–∏–º

# –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
LOCAL_STORAGE_KEY: str = "multi_chat_storage_v20" # –°–Ω–æ–≤–∞ —Å–º–µ–Ω–∏–ª –∫–ª—é—á –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
DEFAULT_CHAT_NAME: str = "–ù–æ–≤—ã–π —á–∞—Ç"

# –í–µ–±-–ø–æ–∏—Å–∫
MAX_SEARCH_RESULTS_PER_QUERY: int = 3
MAX_QUERIES_TO_GENERATE: int = 2
MAX_SNIPPET_LENGTH: int = 250
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫
SEARCH_QUERY_GENERATION_MODEL: str = "deepseek/deepseek-chat-v3-0324:free"

# –°–µ—Ç—å –∏ —Ç–∞–π–º-–∞—É—Ç—ã
REQUEST_TIMEOUT: int = 30
STREAM_TIMEOUT: int = 180

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
# **–í–ê–ñ–ù–û:** –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–µ–ø–ª–æ–∏—Ç–µ, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ localhost
HTTP_REFERER: str = st.secrets.get("APP_URL", "http://localhost:8501")
APP_TITLE: str = "Streamlit Chat AI (Fixed)"
HEADERS: Dict[str, str] = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "Content-Type": "application/json",
    "HTTP-Referer": HTTP_REFERER,
    "X-Title": APP_TITLE
}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–ß–∞—Ç –ò–ò (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)", # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    page_icon="üí°", # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π CSS ---
st.markdown("""
<style>
    /* –°–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit */
    /* –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ö–µ–¥–µ—Ä (—Å –∫–Ω–æ–ø–∫–æ–π Share –∏ —Ç.–¥.) */
    [data-testid="stHeader"] {
        display: none !important;
        visibility: hidden !important;
    }
    /* –£–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω–∏–π –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ (—Å "Manage app") */
    [data-testid="stStatusWidget"] {
        display: none !important;
        visibility: hidden !important;
    }
     /* –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–∫—Ä—ã—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ—É—Ç–µ—Ä Streamlit, –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è */
    footer {
        display: none !important;
        visibility: hidden !important;
    }

    /* –û–±—â–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
    .main .block-container {
        padding-top: 1.5rem;
        padding-bottom: 5rem; /* –ú–µ—Å—Ç–æ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ */
        padding-left: 1.5rem;
        padding-right: 1.5rem;
    }

    /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è) */
    [data-testid="stChatMessage"] {
        border-radius: 0.5rem;
        padding: 0.7rem 1rem !important;
        margin-bottom: 1rem !important;
        border: 1px solid rgba(128, 131, 141, 0.2); /* –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã */
    }
    [data-testid="stChatMessage"] > div { /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
        gap: 0.75rem;
    }
    [data-testid="stChatMessage"] .stChatMessageContent p {
        line-height: 1.6;
    }

    /* –°–∞–π–¥–±–∞—Ä */
    [data-testid="stSidebar"] {
        padding: 1.5rem 1rem;
    }
    [data-testid="stSidebar"] h2 { /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ */
        text-align: center;
        margin-bottom: 1.5rem;
        font-size: 1.3rem;
    }
     [data-testid="stSidebar"] h5 { /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –†–µ–∂–∏–º –ò–ò */
        margin-top: 1rem;
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
    }
    /* –ö–Ω–æ–ø–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ */
    [data-testid="stSidebar"] .stButton button {
        width: 100%;
        margin-bottom: 0.6rem;
        border-radius: 0.3rem;
        font-weight: 500;
    }

    /* –í–∏–¥–∂–µ—Ç—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ */
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"],
    [data-testid="stSidebar"] [data-testid="stToggle"] label[data-baseweb="checkbox"] > div:first-child {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 0.4rem;
        display: block;
    }
     [data-testid="stSidebar"] [data-testid="stToggle"] {
         margin-top: 1rem;
     }

    /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */
    [data-testid="stChatInput"] {
      border-top: 1px solid rgba(128, 131, 141, 0.2); /* –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ */
      padding: 1rem 1.5rem;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è markdown –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */
    .stChatMessageContent code {
        background-color: rgba(128, 131, 141, 0.15); /* –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω */
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
    }
    .stChatMessageContent pre { /* –°—Ç–∏–ª—å –¥–ª—è –±–ª–æ–∫–∞ –∫–æ–¥–∞ */
        background-color: rgba(128, 131, 141, 0.1);
        border: 1px solid rgba(128, 131, 141, 0.2);
        border-radius: 0.3rem;
        padding: 0.5rem 0.7rem;
        overflow-x: auto;
    }
    .stChatMessageContent pre code { /* –£–±–∏—Ä–∞–µ–º –¥–æ–ø. —Ñ–æ–Ω —É –∫–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ pre */
         background-color: transparent;
         padding: 0;
         border-radius: 0;
         font-size: inherit; /* –ù–∞—Å–ª–µ–¥—É–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ—Ç pre */
    }
    .stChatMessageContent blockquote {
        border-left: 3px solid #adb5bd;
        padding-left: 1rem;
        margin-left: 0;
        color: #6c757d; /* –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º */
    }
</style>
""", unsafe_allow_html=True)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ ---
if not OPENROUTER_API_KEY:
    st.error("‚õî –ö–ª—é—á API OpenRouter (`OPENROUTER_API_KEY`) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit!", icon="üö®")
    logger.critical("–ö–ª—é—á API OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    st.stop()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
try:
    localS = LocalStorage()
    logger.info("LocalStorage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LocalStorage: {e}", exc_info=True)
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.", icon="üö®")
    localS = None

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats() -> Tuple[Dict[str, List[Dict[str, str]]], Optional[str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã –∏ –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ LocalStorage."""
    default_chats: Dict[str, List[Dict[str, str]]] = {f"{DEFAULT_CHAT_NAME} 1": []}
    default_active: str = f"{DEFAULT_CHAT_NAME} 1"
    initial_search_state: bool = False

    if "web_search_enabled" not in st.session_state:
        st.session_state.web_search_enabled = initial_search_state

    if not localS:
        logger.warning("LocalStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—Ç —á–∞—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_chats, default_active

    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if not data_str:
        logger.info("–î–∞–Ω–Ω—ã–µ –≤ LocalStorage –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—Ç —á–∞—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_chats, default_active

    try:
        data = json.loads(data_str)
        if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
            loaded_chats: Dict[str, List[Dict[str, str]]] = {}
            active_chat_name: Optional[str] = data["active_chat"]

            for name, history in data["chats"].items():
                if isinstance(history, list):
                    valid_history = [
                        msg for msg in history
                        if isinstance(msg, dict) and msg.get("role") in ["user", "assistant"] and isinstance(msg.get("content"), str)
                    ]
                    loaded_chats[name] = valid_history
                else:
                    logger.warning(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ '{name}' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")

            if not loaded_chats:
                logger.warning("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —á–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º.")
                st.session_state.web_search_enabled = initial_search_state
                return default_chats, default_active

            if active_chat_name not in loaded_chats:
                fallback_active = list(loaded_chats.keys())[0]
                logger.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π: '{fallback_active}'.")
                active_chat_name = fallback_active

            st.session_state.web_search_enabled = data.get("web_search_enabled", initial_search_state)
            logger.info(f"–ß–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã–π: '{active_chat_name}'. –ü–æ–∏—Å–∫: {st.session_state.web_search_enabled}.")
            return loaded_chats, active_chat_name
        else:
            logger.warning("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ LocalStorage –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º.")
            st.session_state.web_search_enabled = initial_search_state
            return default_chats, default_active
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}. –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º.", exc_info=True)
        st.session_state.web_search_enabled = initial_search_state
        return default_chats, default_active


def save_all_chats(chats_dict: Dict[str, List[Dict[str, str]]], active_chat_name: Optional[str], web_search_state: bool) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —á–∞—Ç—ã, –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –≤ LocalStorage."""
    if not localS:
        logger.warning("LocalStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return False
    if not isinstance(chats_dict, dict):
        logger.error("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–µ —Å–ª–æ–≤–∞—Ä—å).")
        return False

    cleaned_chats: Dict[str, List[Dict[str, str]]] = {}
    for name, history in chats_dict.items():
        if isinstance(history, list):
            cleaned_chats[name] = [
                msg for msg in history
                if isinstance(msg, dict) and msg.get("role") in ["user", "assistant"] and isinstance(msg.get("content"), str)
            ]

    if not cleaned_chats:
        active_chat_name = None
    elif active_chat_name not in cleaned_chats:
        fallback_active = list(cleaned_chats.keys())[0] if cleaned_chats else None
        logger.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{active_chat_name}' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞–Ω: {fallback_active}")
        active_chat_name = fallback_active

    data_to_save: Dict[str, Any] = {
        "chats": cleaned_chats,
        "active_chat": active_chat_name,
        "web_search_enabled": web_search_state
    }

    try:
        localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save))
        logger.info(f"–ß–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã–π: '{active_chat_name}', –ü–æ–∏—Å–∫: {web_search_state}.")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤ –≤ LocalStorage: {e}", exc_info=True)
        st.toast("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞!", icon="üö®")
        return False

def generate_new_chat_name(existing_names: List[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞."""
    i = 1
    base_name = DEFAULT_CHAT_NAME
    while f"{base_name} {i}" in existing_names:
        i += 1
    return f"{base_name} {i}"

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def generate_search_queries(user_prompt: str) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤–æ–ø—Ä–æ—Å—ã) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é LLM."""
    current_date_str = datetime.datetime.now().strftime('%d %B %Y')
    generation_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ {MAX_QUERIES_TO_GENERATE} –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö, **–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**. –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Å–∞–º—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ.

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º:**
- –§–æ—Ä–º—É–ª–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª —á–µ–ª–æ–≤–µ–∫.
- **–ò–∑–±–µ–≥–∞–π –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.**
- –£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑–º–æ–∂–Ω—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å–µ–≥–æ–¥–Ω—è {current_date_str}).
- –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–æ–π –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

**–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:**
- –ö–∞–∫–æ–≤—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ [–æ–±–ª–∞—Å—Ç—å]?
- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç [—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è] –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏?
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ [–ø—Ä–æ–¥—É–∫—Ç –ê] –∏ [–ø—Ä–æ–¥—É–∫—Ç –ë] –≤ {datetime.datetime.now().year} –≥–æ–¥—É: –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã.
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ [—Å–æ–±—ã—Ç–∏–µ/–∫–æ–º–ø–∞–Ω–∏—è].
- –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è [–∑–∞–¥–∞—á–∞].

**–í—ã–≤–æ–¥:**
–í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –ë–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–ª–∏ –∫–∞–≤—ã—á–µ–∫.

**–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
"{user_prompt}"

**–ü–æ–∏—Å–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**"""

    payload = {
        "model": SEARCH_QUERY_GENERATION_MODEL, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        "messages": [{"role": "user", "content": generation_prompt}],
        "max_tokens": 150,
        "temperature": 0.5,
        "stop": ["\n\n"],
    }
    generated_queries: List[str] = []

    try:
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –í–û–ü–†–û–°–û–í –¥–ª—è: '{user_prompt[:50]}...'")
        response = requests.post(OPENROUTER_API_URL, headers=HEADERS, json=payload, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()
        raw_queries_text = data.get("choices", [{}])[0].get("message", {}).get("content", "")

        if raw_queries_text:
            potential_queries = raw_queries_text.strip().split('\n')
            generated_queries = [
                re.sub(r"^\s*[\d\.\-\*]+\s*", "", q.strip()).strip('" ')
                for q in potential_queries if q.strip() and len(q.strip()) > 5
            ]
            logger.info(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_queries)} –≤–æ–ø—Ä–æ—Å–æ–≤: {generated_queries}")
        else:
            logger.warning("  API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")

    except requests.exceptions.Timeout:
        logger.error("  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: –¢–∞–π–º–∞—É—Ç.")
        st.toast("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", icon="‚è±Ô∏è")
    except requests.exceptions.RequestException as e:
        logger.error(f"  –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        st.toast(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}", icon="üö®")
    except Exception as e:
        logger.error(f"  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}", exc_info=True)
        st.toast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.", icon="‚ùì")

    return generated_queries[:MAX_QUERIES_TO_GENERATE]

def clean_html(raw_html: Optional[str]) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML —Ç–µ–≥–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç HTML —Å—É—â–Ω–æ—Å—Ç–∏."""
    if not isinstance(raw_html, str): return ""
    cleanr = re.compile('<.*?>'); cleantext = re.sub(cleanr, '', raw_html)
    cleantext = unescape(cleantext); cleantext = re.sub(r'\s+', ' ', cleantext).strip()
    return cleantext

def perform_web_search(queries: List[str]) -> Tuple[str, bool]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é DuckDuckGo Search."""
    all_results_text: str = ""
    search_errors: List[str] = []
    search_performed_successfully: bool = False

    if not queries:
        logger.warning("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞.")
        return "–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è (–Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤).", False

    logger.info(f"–ù–∞—á–∏–Ω–∞—é –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–∞–º...")
    aggregated_results: List[Dict[str, str]] = []

    try:
        with DDGS(timeout=REQUEST_TIMEOUT) as ddgs:
            for idx, query in enumerate(queries, 1):
                query_log = f"'{query[:60]}...'" if len(query) > 60 else f"'{query}'"
                logger.info(f"  [–ü–æ–∏—Å–∫ {idx}/{len(queries)}] –ó–∞–ø—Ä–æ—Å: {query_log}")
                try:
                    search_results = list(ddgs.text(query, max_results=MAX_SEARCH_RESULTS_PER_QUERY))
                    for result in search_results:
                        result['title'] = clean_html(result.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
                        result['body'] = clean_html(result.get('body', ''))
                    aggregated_results.extend(search_results)
                    logger.info(f"    –ù–∞–π–¥–µ–Ω–æ {len(search_results)} –¥–ª—è {query_log}.")
                except Exception as e:
                    logger.error(f"    –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É {query_log}: {e}", exc_info=False) # –£–±—Ä–∞–ª exc_info –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –ª–æ–≥–∞
                    search_errors.append(query_log)

        if search_errors: st.toast(f"–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {', '.join(search_errors)}", icon="üï∏Ô∏è")

        if aggregated_results:
            unique_results_dict: Dict[str, Dict[str, str]] = {}
            for res in aggregated_results:
                body = res.get('body')
                if body and body not in unique_results_dict: unique_results_dict[body] = res
            unique_results = list(unique_results_dict.values())
            logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(aggregated_results)}, –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(unique_results)}")

            if unique_results:
                result_lines = [f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {res.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n–°–Ω–∏–ø–ø–µ—Ç: {(res.get('body', '')[:MAX_SNIPPET_LENGTH] + '...') if len(res.get('body', '')) > MAX_SNIPPET_LENGTH else res.get('body', '')}" for i, res in enumerate(unique_results, 1)]
                all_results_text = "\n\n".join(result_lines)
                search_performed_successfully = True
                logger.info("–í–µ–±-–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
            else: all_results_text = "–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."; logger.info(all_results_text)
        else: all_results_text = "–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."; logger.info(all_results_text)
        return all_results_text.strip(), search_performed_successfully

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}", icon="üï∏Ô∏è")
        return f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}", False

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id: str, chat_history: List[Dict[str, str]]) -> Generator[Optional[str], None, None]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞."""
    if not isinstance(chat_history, list) or not chat_history:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞.")
        yield None; return

    payload = {"model": model_id, "messages": chat_history, "stream": True}
    stream_successful: bool = False; response = None
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∫ –º–æ–¥–µ–ª–∏: {model_id}")
        response = requests.post(OPENROUTER_API_URL, headers=HEADERS, json=payload, stream=True, timeout=(REQUEST_TIMEOUT, STREAM_TIMEOUT))
        response.raise_for_status()
        logger.info("–°—Ç—Ä–∏–º–∏–Ω–≥ –Ω–∞—á–∞—Ç —É—Å–ø–µ—à–Ω–æ.")
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data_str = decoded_line[len("data: "):].strip()
                        if json_data_str == "[DONE]": logger.info("–°—Ç—Ä–∏–º–∏–Ω–≥ [DONE]."); break
                        if json_data_str:
                            chunk = json.loads(json_data_str)
                            delta = chunk.get("choices", [{}])[0].get("delta", {})
                            delta_content = delta.get("content")
                            if delta_content: stream_successful = True; yield delta_content
                    except json.JSONDecodeError: logger.warning(f"–û—à–∏–±–∫–∞ JSON —á–∞–Ω–∫–∞: '{json_data_str}'"); continue
                    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e}", exc_info=True); continue
        if not stream_successful: logger.warning("–°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    except requests.exceptions.Timeout as e: logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: –¢–∞–π–º–∞—É—Ç ({STREAM_TIMEOUT}s). {e}"); yield None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏/API —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}")
        error_details = "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π –æ—Ç–≤–µ—Ç–∞.";
        if response is not None:
            try: error_details = response.text[:500]
            except Exception: pass
        logger.error(f"  –î–µ—Ç–∞–ª–∏: {error_details}"); yield None
    except Exception as e: logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}", exc_info=True); yield None
    finally:
        if response is not None:
            try: response.close(); logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∑–∞–∫—Ä—ã—Ç–æ.")
            except Exception: pass

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Streamlit (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if "all_chats" not in st.session_state or "active_chat" not in st.session_state:
    logger.info("–ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ (—á–∞—Ç—ã).")
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
else: logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (—á–∞—Ç—ã) —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
if "selected_mode" not in st.session_state:
    st.session_state.selected_mode = DEFAULT_MODE
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODE}")
if "web_search_enabled" not in st.session_state:
     st.session_state.web_search_enabled = False
     logger.warning("web_search_enabled –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ False.")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if not isinstance(st.session_state.get("all_chats"), dict):
     logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: st.session_state.all_chats –Ω–µ —Å–ª–æ–≤–∞—Ä—å. –°–±—Ä–æ—Å.")
     st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
active_chat_name = st.session_state.get("active_chat")
all_chats_keys = list(st.session_state.all_chats.keys())
if active_chat_name not in all_chats_keys:
    logger.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–ø–∏—Å–æ–∫: {all_chats_keys}.")
    if all_chats_keys: st.session_state.active_chat = all_chats_keys[0]
    else:
        new_name = generate_new_chat_name([])
        st.session_state.all_chats = {new_name: []}; st.session_state.active_chat = new_name
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: '{new_name}'")
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
    st.rerun()

# --- –°–∞–π–¥–±–∞—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ) ---
with st.sidebar:
    st.markdown("## üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏")
    chat_names = list(st.session_state.all_chats.keys())

    try: active_chat_index = chat_names.index(st.session_state.active_chat)
    except ValueError:
        logger.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{st.session_state.active_chat}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {chat_names}. –í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π.")
        active_chat_index = 0
        if chat_names: st.session_state.active_chat = chat_names[0]
        else: logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."); st.error("–û—à–∏–±–∫–∞: –ù–µ—Ç —á–∞—Ç–æ–≤."); st.stop()

    selected_chat = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
        options=chat_names,
        index=active_chat_index,
        key="chat_selector"
    )

    if selected_chat is not None and selected_chat != st.session_state.active_chat:
        st.session_state.active_chat = selected_chat
        logger.info(f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {selected_chat}")
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
        st.rerun()

    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚ûï –ù–æ–≤—ã–π", key="new_chat_button", help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —á–∞—Ç", use_container_width=True):
            new_name = generate_new_chat_name(chat_names)
            st.session_state.all_chats[new_name] = []
            st.session_state.active_chat = new_name
            logger.info(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç: {new_name}")
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
            st.rerun()
    with col2:
        if chat_names:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key="delete_chat_button", type="secondary", help="–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", use_container_width=True):
                chat_to_delete = st.session_state.active_chat
                logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞: {chat_to_delete}")
                if chat_to_delete in st.session_state.all_chats:
                    del st.session_state.all_chats[chat_to_delete]
                    logger.info(f"–ß–∞—Ç '{chat_to_delete}' —É–¥–∞–ª–µ–Ω.")
                    remaining_chats = list(st.session_state.all_chats.keys())
                    if remaining_chats: st.session_state.active_chat = remaining_chats[0]
                    else:
                        new_name = generate_new_chat_name([])
                        st.session_state.all_chats = {new_name: []}; st.session_state.active_chat = new_name
                        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.")
                    save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
                    st.toast(f"–ß–∞—Ç '{chat_to_delete}' —É–¥–∞–ª–µ–Ω.", icon="üóëÔ∏è")
                    st.rerun()
                else: logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: {chat_to_delete}"); st.toast("–û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="‚ùì")

    st.divider()

    search_toggled = st.toggle(
        "üåê –í–µ–±-–ø–æ–∏—Å–∫",
        value=st.session_state.web_search_enabled,
        key="web_search_toggle",
        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"
    )
    if search_toggled != st.session_state.web_search_enabled:
        st.session_state.web_search_enabled = search_toggled
        logger.info(f"–í–µ–±-–ø–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {search_toggled}")
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)

    st.divider()

    st.markdown("##### üß† –†–µ–∂–∏–º –ò–ò")
    mode_options = list(MODES.keys())
    try: current_mode_index = mode_options.index(st.session_state.selected_mode)
    except ValueError:
        logger.warning(f"–†–µ–∂–∏–º '{st.session_state.selected_mode}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–±—Ä–æ—Å –Ω–∞ {DEFAULT_MODE}.")
        st.session_state.selected_mode = DEFAULT_MODE
        current_mode_index = mode_options.index(DEFAULT_MODE)

    selected_mode_radio = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        options=mode_options,
        index=current_mode_index,
        key="mode_selector"
    )
    if selected_mode_radio is not None and selected_mode_radio != st.session_state.selected_mode:
        st.session_state.selected_mode = selected_mode_radio
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {selected_mode_radio}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ) ---
current_active_chat_name = st.session_state.active_chat
current_mode_name = st.session_state.selected_mode
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

st.markdown(f"### –ß–∞—Ç: {current_active_chat_name} <span style='font-size: 0.7em; color: grey;'>({current_mode_name.strip()})</span>", unsafe_allow_html=True)

chat_container = st.container()
with chat_container:
    if current_active_chat_name in st.session_state.all_chats:
        chat_history = st.session_state.all_chats[current_active_chat_name]
        for i, message in enumerate(chat_history):
            role = message.get("role"); content = message.get("content")
            avatar = "üßë‚Äçüíª" if role == "user" else "üí°"
            if role and content:
                with st.chat_message(role, avatar=avatar):
                    st.markdown(content, unsafe_allow_html=True)
            else: logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    else: st.warning(f"–ß–∞—Ç '{current_active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."); logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞: {current_active_chat_name}")

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ) ---
prompt = st.chat_input(f"–°–ø—Ä–æ—Å–∏—Ç–µ {current_mode_name.strip()}...")
if prompt:
    if current_active_chat_name in st.session_state.all_chats:
        logger.info(f"–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ '{current_active_chat_name}'.")
        user_message: Dict[str, str] = {"role": "user", "content": prompt}
        st.session_state.all_chats[current_active_chat_name].append(user_message)
        save_all_chats(st.session_state.all_chats, current_active_chat_name, st.session_state.web_search_enabled)
        st.rerun()
    else:
        st.error("–û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="‚ùå")
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: —á–∞—Ç '{current_active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# --- –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ) ---
if current_active_chat_name in st.session_state.all_chats:
    current_chat_history = st.session_state.all_chats[current_active_chat_name]
    if current_chat_history and current_chat_history[-1]["role"] == "user":
        last_user_prompt = current_chat_history[-1]["content"]
        logger.info(f"\n--- –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è '{current_active_chat_name}' ---")
        logger.info(f"–ü—Ä–æ–º–ø—Ç: '{last_user_prompt[:100]}...' | –ü–æ–∏—Å–∫: {'–í–ö–õ' if st.session_state.web_search_enabled else '–í–´–ö–õ'}")
        context_for_ai: List[Dict[str, str]] = list(current_chat_history)
        system_prompt_content: Optional[str] = None
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")

        # --- –í–µ–±-–ø–æ–∏—Å–∫ ---
        if st.session_state.web_search_enabled:
            logger.info(">>> –í–µ–±-–ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            search_results_str: str = "–ü–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è."; search_performed_successfully: bool = False; generated_queries: List[str] = []
            try:
                with st.spinner("–ü–æ–¥–±–∏—Ä–∞—é –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã... ü§î"): generated_queries = generate_search_queries(last_user_prompt)
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ generate_search_queries: {e}", exc_info=True); st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.", icon="‚ùì")
            queries_to_search = generated_queries if generated_queries else [last_user_prompt]
            if not generated_queries: logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            search_spinner_text = f"–ò—â—É –≤ —Å–µ—Ç–∏ ({len(queries_to_search)})... üåê"
            try:
                with st.spinner(search_spinner_text): search_results_str, search_performed_successfully = perform_web_search(queries_to_search)
                if search_performed_successfully:
                    logger.info("–í–µ–±-–ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω.")
                    system_prompt_content = f"""–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –ë—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –≤–µ–±-–ø–æ–∏—Å–∫. **–¢–≤–æ—è –∑–∞–¥–∞—á–∞:** –ò–∑—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ –∏ **—Å–∏–Ω—Ç–µ–∑–∏—Ä—É–π –∏–∑ –Ω–∏—Ö –µ–¥–∏–Ω—ã–π, —Å–≤—è–∑–Ω—ã–π –æ—Ç–≤–µ—Ç** –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø–æ–∏—Å–∫–∞. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Å–∞–º —Ñ–∞–∫—Ç –ø–æ–∏—Å–∫–∞ –∏ –Ω–µ –≤–∫–ª—é—á–∞–π URL.\n\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n{search_results_str}\n--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
                else:
                    logger.warning(f"–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ—É–¥–∞—á–µ–Ω/–ø—É—Å—Ç: '{search_results_str}'")
                    system_prompt_content = f"""–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –±—ã–ª –≤–∫–ª—é—á–µ–Ω, –Ω–æ **–Ω–µ –¥–∞–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤** (–ü—Ä–∏—á–∏–Ω–∞: '{search_results_str}'). –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, **–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö**. **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**, —á—Ç–æ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º."""
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ perform_web_search: {e}", exc_info=True); st.error("–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞.", icon="üï∏Ô∏è");
                system_prompt_content = f"""–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –ü—Ä–æ–∏–∑–æ—à–ª–∞ **–æ—à–∏–±–∫–∞** –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ. –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, **–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö**. –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–∏—Å–∫–∞."""
        else: # –ü–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω
            logger.info(">>> –í–µ–±-–ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω.")
            system_prompt_content = f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –í–´–ö–õ–Æ–ß–ï–ù. –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö."

        # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ---
        if system_prompt_content:
            context_for_ai.insert(-1, {"role": "system", "content": system_prompt_content})
            logger.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")

        # --- –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ ---
        logger.info(">>> –ó–∞–ø—Ä–æ—Å –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò.")
        final_response_to_save: Optional[str] = None; ai_response_error: bool = False; full_response_chunks: List[str] = []
        try:
            with st.chat_message("assistant", avatar="üí°"):
                message_placeholder = st.empty()
                message_placeholder.markdown("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç... ‚è≥")
                response_generator = stream_ai_response(current_model_id, context_for_ai)
                for chunk in response_generator:
                    if chunk is None:
                        logger.error("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (None).")
                        ai_response_error = True; message_placeholder.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞!", icon="üî•"); break
                    if chunk:
                        full_response_chunks.append(chunk)
                        message_placeholder.markdown("".join(full_response_chunks) + " ‚ñå", unsafe_allow_html=True)
                if not ai_response_error:
                    final_response_to_save = "".join(full_response_chunks).strip()
                    if final_response_to_save: message_placeholder.markdown(final_response_to_save, unsafe_allow_html=True); logger.info("–û—Ç–≤–µ—Ç –ò–ò –æ—Ç–æ–±—Ä–∞–∂–µ–Ω.")
                    else: logger.warning("–û—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø—É—Å—Ç."); message_placeholder.warning("–ò–ò –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç.", icon="ü§∑"); final_response_to_save = None
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}", exc_info=True)
             st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}", icon="üí•"); final_response_to_save = None; ai_response_error = True

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
        if final_response_to_save and not ai_response_error:
            logger.info(">>> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò.")
            try:
                if current_active_chat_name in st.session_state.all_chats:
                     assistant_message: Dict[str, str] = {"role": "assistant", "content": final_response_to_save}
                     if not current_chat_history or current_chat_history[-1] != assistant_message:
                          st.session_state.all_chats[current_active_chat_name].append(assistant_message)
                          save_all_chats(st.session_state.all_chats, current_active_chat_name, st.session_state.web_search_enabled)
                          logger.info("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                     else:
                          logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
                else: logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —á–∞—Ç '{current_active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."); st.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.", icon="‚ùå")
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True); st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}", icon="üíæ")
        elif ai_response_error: logger.warning("–û—Ç–≤–µ—Ç –ò–ò –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
        elif not final_response_to_save: logger.warning("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ò–ò –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

        logger.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è '{current_active_chat_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
