# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage
from duckduckgo_search import DDGS
import traceback
import re

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á v12, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
LOCAL_STORAGE_KEY = "multi_chat_storage_v12"
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"
MAX_SEARCH_RESULTS_PER_QUERY = 5
MAX_QUERIES_TO_GENERATE = 3
MAX_SNIPPET_LENGTH = 250

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–£–º–Ω—ã–π –ß–∞—Ç –ò–ò", page_icon="üß†", layout="wide", initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
custom_css = f"""
<style>
    /* ... –≤–∞—à CSS ... */
     .main .block-container {{ padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem; }}
    [data-testid="stChatMessage"] {{ background: none !important; border: none !important; box-shadow: none !important; padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important; }}
    [data-testid="stChatMessage"] > div {{ gap: 0.75rem; }}
    [data-testid="stChatMessage"] .stChatMessageContent {{ padding: 0 !important; }}
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    # ... (–∫–æ–¥ load_all_chats) ...
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                for chat_name, history in data["chats"].items():
                    if not isinstance(history, list): data["chats"][chat_name] = []
                    else: data["chats"][chat_name] = [msg for msg in history if isinstance(msg, dict) and "role" in msg and "content" in msg and msg["content"]]
                if data["active_chat"] not in data["chats"]: data["active_chat"] = list(data["chats"].keys())[0] if data["chats"] else None
                if data["active_chat"] is None: raise ValueError("No active chat found.")
                return data["chats"], data["active_chat"]
        except Exception as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}.")
    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"; default_chats = {first_chat_name: []}
    return default_chats, first_chat_name

def save_all_chats(chats_dict, active_chat_name):
    # ... (–∫–æ–¥ save_all_chats) ...
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        cleaned_chats = {}
        for name, history in chats_dict.items():
            if isinstance(history, list): cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and "role" in msg and "content" in msg and msg["content"]]
            else: cleaned_chats[name] = []
        if active_chat_name not in cleaned_chats: active_chat_name = list(cleaned_chats.keys())[0] if cleaned_chats else None
        if active_chat_name is None: return False
        data_to_save = {"chats": cleaned_chats, "active_chat": active_chat_name}
        try: localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"); return False
    return False

def generate_new_chat_name(existing_names):
    # ... (–∫–æ–¥ generate_new_chat_name) ...
    i = 1; base_name = DEFAULT_CHAT_NAME
    while f"{base_name} {i}" in existing_names: i += 1
    return f"{base_name} {i}"

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ ---
def should_perform_search(user_prompt, model_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    greetings = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "hi", "hello", "—Ö–µ–ª–ª–æ", "—Ö–∞–π", "–¥–∞—Ä–æ–≤"]
    common_phrases = ["–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "—Ö–æ—Ä–æ—à–æ", "–ª–∞–¥–Ω–æ", "–æ–∫", "–æ–∫–µ–π", "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]
    prompt_lower = user_prompt.lower().strip(" !?.")

    # –ü—Ä–∞–≤–∏–ª–æ 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
    if prompt_lower in greetings or prompt_lower in common_phrases or len(user_prompt.split()) <= 1:
         print(f"–ü—Ä–æ—Å—Ç–∞—è —Ñ—Ä–∞–∑–∞/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ('{user_prompt}') - –ø–æ–∏—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
         return False
    # –ü—Ä–∞–≤–∏–ª–æ 2: –ü—Ä–æ—Å—Ç–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
    if re.fullmatch(r"^\s*[\d\s\+\-\*\/\(\)\.]+\s*=?\s*$", user_prompt):
         print(f"–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å ('{user_prompt}') - –ø–æ–∏—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
         return False

    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ."); return False

    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}

    # –°–ª–µ–≥–∫–∞ –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    decision_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù—É–∂–µ–Ω –ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–≥–æ –ø–æ–∏—Å–∫ –ê–ö–¢–£–ê–õ–¨–ù–û–ô (–Ω–æ–≤–µ–µ 2023 –≥–æ–¥–∞) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–î–ê" (–Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫):
- –ó–∞–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π, –Ω–æ–≤–æ—Å—Ç–µ–π, –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π.
- –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è (—Ç–µ–∫—É—â–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç, —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞, –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞, –ø–æ–≥–æ–¥–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞).
- –ó–∞–ø—Ä–æ—Å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤ —Å–µ—Ç–∏ ("–Ω–∞–π–¥–∏", "–ø–æ–∏—â–∏", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ –æ").

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–ù–ï–¢" (–ø–æ–∏—Å–∫ –ù–ï –Ω—É–∂–µ–Ω):
- –≠—Ç–æ –û–ë–´–ß–ù–û–ï –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–æ—â–∞–Ω–∏–µ –∏–ª–∏ –æ–±—â–∞—è —Ñ—Ä–∞–∑–∞ ("–ø—Ä–∏–≤–µ—Ç", "—Å–ø–∞—Å–∏–±–æ", "–∫–∞–∫ –¥–µ–ª–∞?", "–ø–æ–∫–∞").
- –ó–∞–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –û–ë–©–ò–• –∑–Ω–∞–Ω–∏–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, –∏—Å—Ç–æ—Ä–∏–∏ (–¥–æ 2023 –≥–æ–¥–∞), –Ω–∞—É–∫–∏.
- –≠—Ç–æ –¢–í–û–†–ß–ï–°–ö–ò–ô –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø–∏—à–∏ —Å—Ç–∏—Ö, –∫–æ–¥, —Ä–∞—Å—Å–∫–∞–∑, –∏–¥–µ—é).
- –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–±–µ (–ò–ò), –Ω–∞—à–µ–º –¥–∏–∞–ª–æ–≥–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π small talk.
- –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ –∏–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞, –Ω–µ —Ç—Ä–µ–±—É—é—â–∞—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ–≤.

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_prompt}"

–û–¢–í–ï–¢–¨ –¢–û–õ–¨–ö–û –û–î–ù–ò–ú –°–õ–û–í–û–ú: –î–ê –∏–ª–∏ –ù–ï–¢."""

    payload = {"model": model_id, "messages": [{"role": "user", "content": decision_prompt}], "max_tokens": 3, "temperature": 0.0}

    try:
        print(f"–†–µ—à–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –¥–ª—è: '{user_prompt[:50]}...'")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        decision = data.get("choices", [{}])[0].get("message", {}).get("content", "").strip().upper()
        print(f"  –†–µ—à–µ–Ω–∏–µ –ò–ò: {decision}")
        return decision == "–î–ê" # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ: {e}")
        return False

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def generate_search_queries(user_prompt, model_id):
    # ... (–∫–æ–¥ generate_search_queries) ...
    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."); return []
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json", "HTTP-Referer": "http://localhost:8501", "X-Title": "Streamlit Smart Chat AI"}
    generation_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–æ {MAX_QUERIES_TO_GENERATE} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –ó–∞–ø—Ä–æ—Å: "{user_prompt}" –ó–∞–ø—Ä–æ—Å—ã:"""
    payload = {"model": model_id, "messages": [{"role": "user", "content": generation_prompt}], "max_tokens": 100, "temperature": 0.3}
    generated_queries = []
    try:
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è: '{user_prompt[:50]}...'"); response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status(); data = response.json(); raw_queries = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        if raw_queries:
            queries = [re.sub(r"^\s*[\d\.\-\*]+\s*", "", q.strip()) for q in raw_queries.split('\n') if q.strip()]
            generated_queries = [q for q in queries if q]; print(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_queries}")
    except Exception as e: print(f"  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
    return generated_queries[:MAX_QUERIES_TO_GENERATE]

# --- –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def perform_web_search(queries: list, max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY):
    # ... (–∫–æ–¥ perform_web_search) ...
    all_results_text = ""; aggregated_results = []
    if not queries: return "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞."
    print(f"–ü–æ–∏—Å–∫ –ø–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–∞–º...");
    try:
        with DDGS(timeout=25) as ddgs:
            for idx, query in enumerate(queries, 1): print(f"  –ó–∞–ø—Ä–æ—Å {idx}/{len(queries)}: '{query}'..."); search_results = list(ddgs.text(query, max_results=max_results_per_query)); aggregated_results.extend(search_results)
        if aggregated_results:
            unique_results = {res.get('body', ''): res for res in aggregated_results if res.get('body')}.values(); print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(unique_results)}")
            if unique_results:
                 all_results_text += "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n"; [all_results_text := all_results_text + f"{i}. {res.get('title', '')}: {(res.get('body', '')[:MAX_SNIPPET_LENGTH] + '...') if len(res.get('body', '')) > MAX_SNIPPET_LENGTH else res.get('body', '')}\n" for i, res in enumerate(unique_results, 1)]
            else: all_results_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        else: all_results_text = "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        return all_results_text.strip()
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}"); return "–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞."

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if "all_chats" not in st.session_state: st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
if "selected_mode" not in st.session_state: st.session_state.selected_mode = DEFAULT_MODE

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
active_chat_name = st.session_state.active_chat

# --- –°–∞–π–¥–±–∞—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
with st.sidebar:
    # ... (–∫–æ–¥ —Å–∞–π–¥–±–∞—Ä–∞) ...
    st.markdown("## üí¨ –ß–∞—Ç—ã"); chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(active_chat_name)
    except ValueError: active_chat_index = 0 if chat_names else -1
    if active_chat_index != -1: selected_chat = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", options=chat_names, index=active_chat_index, label_visibility="collapsed", key="chat_selector"); assert selected_chat is not None; if selected_chat != active_chat_name: st.session_state.active_chat = selected_chat; save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    else: st.write("–ù–µ—Ç —á–∞—Ç–æ–≤.")
    st.divider()
    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"): new_name = generate_new_chat_name(list(st.session_state.all_chats.keys())); st.session_state.all_chats[new_name] = []; st.session_state.active_chat = new_name; save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    if len(chat_names) > 0 and active_chat_index != -1:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            current_chat_to_delete = st.session_state.active_chat
            if current_chat_to_delete in st.session_state.all_chats: del st.session_state.all_chats[current_chat_to_delete]; remaining_chats = list(st.session_state.all_chats.keys()); st.session_state.active_chat = remaining_chats[0] if remaining_chats else None;
            if not st.session_state.active_chat: new_name = generate_new_chat_name([]); st.session_state.all_chats = {new_name: []}; st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    st.divider()
    mode_options = list(MODES.keys()); current_mode_index = mode_options.index(st.session_state.selected_mode) if st.session_state.selected_mode in mode_options else 0
    selected_mode_radio = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index, key="mode_selector"); assert selected_mode_radio is not None; if selected_mode_radio != st.session_state.selected_mode: st.session_state.selected_mode = selected_mode_radio; st.rerun()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ ---
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∏—Å—É–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –û–ë–†–ê–ë–û–¢–ö–ê ---
user_prompt_submitted = False
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    if active_chat_name in st.session_state.all_chats:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ state
        st.session_state.all_chats[active_chat_name].append({"role": "user", "content": prompt})
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        save_all_chats(st.session_state.all_chats, active_chat_name)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_prompt_submitted = True
        # –ù–ï –í–´–ó–´–í–ê–ï–ú st.rerun() –ó–î–ï–°–¨
    else:
        st.error("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ *–ø–æ—Å–ª–µ* –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_chat_state = st.session_state.all_chats.get(active_chat_name, [])

# –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–≤–µ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# (—ç—Ç–æ —É—Å–ª–æ–≤–∏–µ —Ç–∞–∫–∂–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ)
if current_chat_state and current_chat_state[-1]["role"] == "user":

    last_user_prompt = current_chat_state[-1]["content"]
    print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞: '{last_user_prompt[:100]}...' ---")
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")

    # --- –≠—Ç–∞–ø 0: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ ---
    needs_search = False
    # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö/–æ–±—â–∏—Ö —Ñ—Ä–∞–∑
    prompt_lower_check = last_user_prompt.lower().strip(" !?.")
    simple_phrases = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "hi", "hello", "—Ö–µ–ª–ª–æ", "—Ö–∞–π", "–¥–∞—Ä–æ–≤", "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "—Ö–æ—Ä–æ—à–æ", "–ª–∞–¥–Ω–æ", "–æ–∫", "–æ–∫–µ–π", "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]
    is_simple_phrase = prompt_lower_check in simple_phrases or len(last_user_prompt.split()) <= 1 or re.fullmatch(r"^\s*[\d\s\+\-\*\/\(\)\.]+\s*=?\s*$", last_user_prompt)

    if not is_simple_phrase:
         # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ò–ò –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
         with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å... ü§î"):
             needs_search = should_perform_search(last_user_prompt, current_model_id)
    else:
         print("–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ - –ø–æ–∏—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    search_results_str = ""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –î–õ–Ø –ü–ï–†–ï–î–ê–ß–ò –í –ò–ò
    context_for_final_answer = list(current_chat_state)

    if needs_search:
        print(">>> –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫.")
        generated_queries = []
        with st.spinner("–ü–æ–¥–±–∏—Ä–∞—é –∑–∞–ø—Ä–æ—Å—ã... üßê"): generated_queries = generate_search_queries(last_user_prompt, current_model_id)
        if generated_queries:
            with st.spinner(f"–ò—â—É –≤ —Å–µ—Ç–∏... üåê"): search_results_str = perform_web_search(generated_queries)
        else:
            print("–ó–∞–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É."); with st.spinner("–ò—â—É –≤ —Å–µ—Ç–∏... üåê"): search_results_str = perform_web_search([last_user_prompt], max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY)

        is_search_successful = not ("–û—à–∏–±–∫–∞" in search_results_str or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in search_results_str or "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in search_results_str)

        if is_search_successful and search_results_str:
            search_context_message = {"role": "system", "content": f"–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è {current_date}. –í—ã–ø–æ–ª–Ω–µ–Ω –≤–µ–±-–ø–æ–∏—Å–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –∫–∞–∫ –û–°–ù–û–í–ù–û–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n\n{search_results_str}\n--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞ > —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –°–∏–Ω—Ç–µ–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç. –ë–µ–∑ —Å—Å—ã–ª–æ–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}
            context_for_final_answer.insert(-1, search_context_message); print("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
             fallback_context_message = {"role": "system", "content": f"(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–æ–∏—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({search_results_str}). –°–µ–≥–æ–¥–Ω—è {current_date}. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–Ω–∏–π, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –æ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.)"}
             context_for_final_answer.insert(-1, fallback_context_message); print("–î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")

    else: # needs_search == False
        print(">>> –í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        no_search_context_message = {"role": "system", "content": f"–°–µ–≥–æ–¥–Ω—è {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö."}
        context_for_final_answer.insert(-1, no_search_context_message); print("–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–æ–∏—Å–∫–∞.")

    # --- –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –í–ù–£–¢–†–ò —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
    # –í–∞–∂–Ω–æ: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_display_container –∑–¥–µ—Å—å, —Ç.–∫. –æ–Ω –±—ã–ª –≤—ã—à–µ
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, st.chat_message —Å–∞–º–æ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    with st.chat_message("assistant", avatar="üß†"):
        print("–ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞..."); spinner_message = "–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
        if needs_search and search_results_str and is_search_successful: spinner_message = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–µ–±-–¥–∞–Ω–Ω—ã–µ... ‚úçÔ∏è"
        elif needs_search: spinner_message = "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Ç–≤–µ—á–∞—é... ü§î"

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        with st.spinner(spinner_message):
             response_generator = stream_ai_response(current_model_id, context_for_final_answer)
             full_response = st.write_stream(response_generator)
        print("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.")

    # --- –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò ---
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª—É—á–µ–Ω
    if full_response:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –û–°–ù–û–í–ù–û–ô state
        if active_chat_name in st.session_state.all_chats:
             st.session_state.all_chats[active_chat_name].append({"role": "assistant", "content": full_response})
             save_all_chats(st.session_state.all_chats, active_chat_name)
             print("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        else: print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —á–∞—Ç –∏—Å—á–µ–∑.")
    else:
        print("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.")

    print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
    # –í–ê–ñ–ù–û: –ú—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º rerun –∑–¥–µ—Å—å. Streamlit –æ–±–Ω–æ–≤–∏—Ç UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞.

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—é–¥–∞) ---
# –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å —Ä–∏—Å—É–µ—Ç –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é, –≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –∏ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ)
chat_display_container = st.container()
with chat_display_container:
    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    final_display_history = list(st.session_state.all_chats.get(active_chat_name, []))
    for message in final_display_history:
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "üß†"
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"], unsafe_allow_html=True)


# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
