# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç OPENROUTER_API_KEY –¥–æ–±–∞–≤–ª–µ–Ω –≤ Streamlit Cloud
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
AVAILABLE_MODELS = {
    "DeepSeek Chat v3 (Free)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepSeek R1 (Free)": "deepseek/deepseek-r1:free",
}
LOCAL_STORAGE_KEY = "multi_chat_storage_v3" # –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –í–°–ï–• —á–∞—Ç–æ–≤
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ú—É–ª—å—Ç–∏-–ß–∞—Ç –ò–ò",
    page_icon="üí¨",
    layout="wide",
    initial_sidebar_state="expanded" # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS (–¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞) ---
custom_css = """
<style>
    /* --- –û–±—â–∏–µ —Å—Ç–∏–ª–∏ --- */
    .stApp {
        /* background: linear-gradient(to bottom right, #f0f2f6, #e6e9f0); */ /* –ü—Ä–∏–º–µ—Ä —Å–≤–µ—Ç–ª–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ */
        /* background-color: #1e1e1e; color: #d4d4d4; */ /* –ü—Ä–∏–º–µ—Ä —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã (–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤) */
    }
    h1 { text-align: center; padding-bottom: 10px; }
    .stButton button { border-radius: 8px; width: 100%; } /* –ö–Ω–æ–ø–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */
    .stSelectbox label { font-weight: bold; }
    div[data-testid="stSelectbox"] > div { cursor: pointer; }

    /* --- –°—Ç–∏–ª–∏ —á–∞—Ç–∞ --- */
    .stChatFloatingInputContainer {
        background-color: rgba(255, 255, 255, 0.8); backdrop-filter: blur(5px);
        border-top: 1px solid #e6e6e6;
    }
    [data-testid="stChatMessage"] {
        border-radius: 15px; padding: 12px 18px; margin-bottom: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05); max-width: 90%;
    }
    [data-testid="stChatMessageContent"] p { margin-bottom: 0.5rem; }

    /* --- –¢–µ–º–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ --- */
    [data-testid="stChatMessage"] code {
        background-color: #282c34; color: #abb2bf; padding: 0.15em 0.4em;
        border-radius: 3px; font-size: 0.9em; word-wrap: break-word;
    }
    [data-testid="stChatMessage"] pre {
        background-color: #282c34; border: 1px solid #3b4048; border-radius: 5px;
        padding: 12px; overflow-x: auto; font-size: 0.9em;
    }
    [data-testid="stChatMessage"] pre code {
        background-color: transparent; color: #abb2bf; padding: 0;
        font-size: inherit; border-radius: 0;
    }

    /* --- –°—Ç–∏–ª–∏ –°–∞–π–¥–±–∞—Ä–∞ --- */
    [data-testid="stSidebar"] {
        /* background-color: #f8f9fa; */ /* –ü—Ä–∏–º–µ—Ä —Å–≤–µ—Ç–ª–æ–≥–æ —Ñ–æ–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞ */
        padding-top: 1rem;
    }
    [data-testid="stSidebar"] h2 { /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ß–∞—Ç—ã" */
        text-align: center;
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }
     /* –°—Ç–∏–ª—å –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (—Ä–∞–¥–∏–æ) */
    div[data-testid="stSidebar"] div[role="radiogroup"] > label {
        display: block; /* –ö–∞–∂–¥—ã–π —á–∞—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ */
        padding: 8px 12px;
        border-radius: 8px;
        margin-bottom: 5px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        border: 1px solid transparent; /* –î–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */
    }
    /* –°—Ç–∏–ª—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —á–∞—Ç */
    div[data-testid="stSidebar"] div[role="radiogroup"] > label:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }
     /* –°—Ç–∏–ª—å –¥–ª—è –í–´–ë–†–ê–ù–ù–û–ì–û —á–∞—Ç–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–¥–µ–ª–∏—Ç—å */
    /* (–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ –∏–∑-–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Streamlit, –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ) */
    div[data-testid="stSidebar"] div[role="radiogroup"] input[type="radio"]:checked + label {
        background-color: rgba(0, 100, 255, 0.1); /* –õ–µ–≥–∫–∏–π —Å–∏–Ω–∏–π —Ñ–æ–Ω */
        border: 1px solid rgba(0, 100, 255, 0.2);
        font-weight: bold;
    }

</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –≤ localStorage ---

def load_all_chats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã –∏ –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ localStorage."""
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if isinstance(data, dict) and "chats" in data and "active_chat" in data:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chats —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if isinstance(data["chats"], dict):
                    return data["chats"], data["active_chat"]
        except json.JSONDecodeError:
            pass # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤–µ—Ä–Ω–µ–º –¥–µ—Ñ–æ–ª—Ç
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç
    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"
    default_chats = {first_chat_name: []} # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    return default_chats, first_chat_name

def save_all_chats(chats_dict, active_chat_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —á–∞—Ç—ã –∏ –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ localStorage."""
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        data_to_save = {"chats": chats_dict, "active_chat": active_chat_name}
        try:
            localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save))
            return True
        except Exception as e:
            # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å
            # print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage: {e}") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return False
    return False

def generate_new_chat_name(existing_names):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞."""
    i = 1
    while f"{DEFAULT_CHAT_NAME} {i}" in existing_names:
        i += 1
    return f"{DEFAULT_CHAT_NAME} {i}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if "all_chats" not in st.session_state:
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —á–∞—Ç–æ–≤
    if st.session_state.active_chat not in st.session_state.all_chats:
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ),
        # –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if st.session_state.all_chats:
            st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]
        else: # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç —á–∞—Ç–æ–≤
            new_name = generate_new_chat_name([])
            st.session_state.all_chats = {new_name: []}
            st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat)

# --- –°–∞–π–¥–±–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ ---
with st.sidebar:
    st.markdown("## üí¨ –ß–∞—Ç—ã")

    chat_names = list(st.session_state.all_chats.keys())
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è st.radio/selectbox
    try:
        active_chat_index = chat_names.index(st.session_state.active_chat)
    except ValueError:
        active_chat_index = 0 # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π

    # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
    selected_chat = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
        options=chat_names,
        index=active_chat_index,
        label_visibility="collapsed" # –°–∫—Ä—ã–≤–∞–µ–º label, —Ç.–∫. –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ß–∞—Ç—ã"
    )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π —á–∞—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if selected_chat != st.session_state.active_chat:
        st.session_state.active_chat = selected_chat
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞

    st.divider()

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏
    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç"):
        new_name = generate_new_chat_name(chat_names)
        st.session_state.all_chats[new_name] = [] # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —á–∞—Ç
        st.session_state.active_chat = new_name # –î–µ–ª–∞–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    if len(chat_names) > 0: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á–∞—Ç—ã
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary"):
            if st.session_state.active_chat in st.session_state.all_chats:
                del st.session_state.all_chats[st.session_state.active_chat] # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è

                # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
                remaining_chats = list(st.session_state.all_chats.keys())
                if remaining_chats:
                    st.session_state.active_chat = remaining_chats[0] # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è
                else:
                    # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    new_name = generate_new_chat_name([])
                    st.session_state.all_chats = {new_name: []}
                    st.session_state.active_chat = new_name

                save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
                st.rerun()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ---
st.title("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")

# --- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ---
model_keys = list(AVAILABLE_MODELS.keys())
# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≤ session_state, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª—Å—è
if "selected_model_name" not in st.session_state:
    st.session_state.selected_model_name = model_keys[0] # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è

st.session_state.selected_model_name = st.selectbox(
    "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
    options=model_keys,
    index=model_keys.index(st.session_state.selected_model_name) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
)
model_id = AVAILABLE_MODELS[st.session_state.selected_model_name]
st.caption(f"ID: `{model_id}`")
st.divider()

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ê–ö–¢–ò–í–ù–û–ì–û —á–∞—Ç–∞ ---
# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
current_messages = st.session_state.all_chats.get(st.session_state.active_chat, [])

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç
if not current_messages:
     current_messages.append(
         {"role": "assistant", "content": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ ({st.session_state.selected_model_name}). –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ?"}
     )
     # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç
     st.session_state.all_chats[st.session_state.active_chat] = current_messages
     save_all_chats(st.session_state.all_chats, st.session_state.active_chat)


# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
for message in current_messages:
    avatar = "üßë‚Äçüíª" if message["role"] == "user" else "ü§ñ"
    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id_func, chat_history_func):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É API –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Å–æ—á–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
    try:
        if "OPENROUTER_API_KEY" not in st.secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="üö®")
             yield None; return
        api_key_from_secrets = st.secrets["OPENROUTER_API_KEY"]
        if not api_key_from_secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –ø—É—Å—Ç–æ–π.", icon="üö®")
             yield None; return
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º: {e}", icon="üí•")
        yield None; return

    headers = {"Authorization": f"Bearer {api_key_from_secrets}", "Content-Type": "application/json"}
    if not isinstance(chat_history_func, list):
         st.error("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏.", icon="‚ö†Ô∏è")
         yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=90)
        response.raise_for_status()
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta_content = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                        if delta_content: yield delta_content
                    except json.JSONDecodeError: continue
                    except Exception as e: break
    except requests.exceptions.Timeout:
        st.error("‚è≥ –¢–∞–π–º–∞—É—Ç.", icon="‚è±Ô∏è"); yield None
    except requests.exceptions.RequestException as e:
        error_message = f"–û—à–∏–±–∫–∞ API: {e}"
        try:
             if e.response is not None: error_message += f" ({e.response.text[:100]})"
        except: pass
        st.error(error_message, icon="üåê"); yield None
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}", icon="üí•"); yield None


# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å..."):

    # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–ï–ö–£–©–ò–ô –ê–ö–¢–ò–í–ù–´–ô —á–∞—Ç
    active_chat_name = st.session_state.active_chat
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫)
    active_chat_history = st.session_state.all_chats.get(active_chat_name, [])
    active_chat_history.append({"role": "user", "content": prompt})

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    st.session_state.all_chats[active_chat_name] = active_chat_history
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —á–∞—Ç—ã –≤ localStorage
    save_all_chats(st.session_state.all_chats, active_chat_name)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω—É–∂–Ω–∞, Streamlit –æ–±–Ω–æ–≤–∏—Ç —á–∞—Ç –Ω–∏–∂–µ
    with st.chat_message("user", avatar="üßë‚Äçüíª"):
        st.markdown(prompt)

    # 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    with st.chat_message("assistant", avatar="ü§ñ"):
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        full_response = st.write_stream(stream_ai_response(model_id, active_chat_history))

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç –ò–ò –≤ –¢–ï–ö–£–©–ò–ô –ê–ö–¢–ò–í–ù–´–ô —á–∞—Ç –∏ –°–ù–û–í–ê –°–û–•–†–ê–ù–Ø–ï–ú
    if full_response:
        active_chat_history.append({"role": "assistant", "content": full_response})
        st.session_state.all_chats[active_chat_name] = active_chat_history
        save_all_chats(st.session_state.all_chats, active_chat_name)
        # –í–∞–∂–Ω–æ: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò, —á—Ç–æ–±—ã st.write_stream –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
        # –∏ —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π.
        st.rerun()


# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
