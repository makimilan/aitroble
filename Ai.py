# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç OPENROUTER_API_KEY –¥–æ–±–∞–≤–ª–µ–Ω –≤ Streamlit Cloud
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v8" # –ù–æ–≤—ã–π –∫–ª—é—á
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ß–∞—Ç –ò–ò",
    page_icon="ü§ñ",
    layout="wide", # –®–∏—Ä–æ–∫–∏–π –º–∞–∫–µ—Ç –¥–ª—è —á–∞—Ç–∞
    initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞ ---
# –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —Ñ–æ–Ω —É —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —Ç–µ–º–∞ Streamlit
custom_css = f"""
<style>
    /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
     .main .block-container {{
        padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem;
    }}
    /* –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω –∏ –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã —É —Å–æ–æ–±—â–µ–Ω–∏–π */
    [data-testid="stChatMessage"] {{
        background: none !important; border: none !important; box-shadow: none !important;
        padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important;
    }}
     /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏ —Ç–µ–∫—Å—Ç–∞ */
     [data-testid="stChatMessage"] > div {{
        gap: 0.75rem;
     }}
     /* –£–±–∏—Ä–∞–µ–º padding —É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */
     [data-testid="stChatMessage"] .stChatMessageContent {{
         padding: 0 !important;
    }}
     /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ */
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ) */
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞–¥–∏–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ */
     [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}

</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                return data["chats"], data["active_chat"]
        except json.JSONDecodeError: pass
    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"
    default_chats = {first_chat_name: []}
    return default_chats, first_chat_name

def save_all_chats(chats_dict, active_chat_name):
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        data_to_save = {"chats": chats_dict, "active_chat": active_chat_name}
        try:
            localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e: return False
    return False

def generate_new_chat_name(existing_names):
    i = 1
    while f"{DEFAULT_CHAT_NAME} {i}" in existing_names: i += 1
    return f"{DEFAULT_CHAT_NAME} {i}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "all_chats" not in st.session_state:
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    if st.session_state.active_chat not in st.session_state.all_chats:
        if st.session_state.all_chats:
            st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]
        else: # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç
            new_name = generate_new_chat_name([])
            st.session_state.all_chats = {new_name: []}
            st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat)

if "selected_mode" not in st.session_state:
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∂–∏–º –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
    # –≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–æ–±–Ω–æ
    # data_str = localS.getItem(LOCAL_STORAGE_KEY)
    # if data_str:
    #     try: data = json.loads(data_str); st.session_state.selected_mode = data.get("mode", DEFAULT_MODE)
    #     except: st.session_state.selected_mode = DEFAULT_MODE
    # else: st.session_state.selected_mode = DEFAULT_MODE
    st.session_state.selected_mode = DEFAULT_MODE # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ ---
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï NameError: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤–µ–∑–¥–µ
active_chat_name = st.session_state.active_chat
active_chat_history = st.session_state.all_chats.get(active_chat_name, [])

# --- –°–∞–π–¥–±–∞—Ä: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ –∏ —Ä–µ–∂–∏–º–æ–º ---
with st.sidebar:
    st.markdown("## üí¨ –ß–∞—Ç—ã")
    chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(active_chat_name) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    except ValueError: active_chat_index = 0

    selected_chat = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", options=chat_names, index=active_chat_index,
        label_visibility="collapsed", key="chat_selector"
    )

    if selected_chat != active_chat_name: # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        st.session_state.active_chat = selected_chat
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    st.divider()

    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"):
        new_name = generate_new_chat_name(chat_names)
        st.session_state.all_chats[new_name] = []
        st.session_state.active_chat = new_name
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    if len(chat_names) > 0:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            if active_chat_name in st.session_state.all_chats:
                del st.session_state.all_chats[active_chat_name]
                remaining_chats = list(st.session_state.all_chats.keys())
                if remaining_chats: st.session_state.active_chat = remaining_chats[0]
                else:
                    new_name = generate_new_chat_name([])
                    st.session_state.all_chats = {new_name: []}
                    st.session_state.active_chat = new_name
                save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
                st.rerun()

    st.divider()

    mode_options = list(MODES.keys())
    try: current_mode_index = mode_options.index(st.session_state.selected_mode)
    except ValueError: current_mode_index = 0

    selected_mode_radio = st.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index,
        key="mode_selector"
    )
    if selected_mode_radio != st.session_state.selected_mode:
        st.session_state.selected_mode = selected_mode_radio
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤ save_all_chats, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        st.rerun()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ê–ö–¢–ò–í–ù–û–ì–û —á–∞—Ç–∞
if not active_chat_history: # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
     active_chat_history.append(
         {"role": "assistant", "content": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø {current_mode_name}. –ù–∞—á–Ω–µ–º –Ω–æ–≤—ã–π —á–∞—Ç!"}
     )
     st.session_state.all_chats[active_chat_name] = active_chat_history
     save_all_chats(st.session_state.all_chats, active_chat_name)

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
chat_display_container = st.container()
with chat_display_container:
    for message in active_chat_history: # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "ü§ñ"
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"], unsafe_allow_html=True) # –î–æ–±–∞–≤–∏–ª unsafe_allow_html –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id_func, chat_history_func):
    try:
        if "OPENROUTER_API_KEY" not in st.secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="üö®")
             yield None; return
        api_key_from_secrets = st.secrets["OPENROUTER_API_KEY"]
        if not api_key_from_secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –ø—É—Å—Ç–æ–π.", icon="üö®")
             yield None; return
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º: {e}", icon="üí•")
        yield None; return

    headers = {"Authorization": f"Bearer {api_key_from_secrets}", "Content-Type": "application/json"}
    if not isinstance(chat_history_func, list): yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=90)
        response.raise_for_status()
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta_content = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                        if delta_content: yield delta_content
                    except: continue
    except requests.exceptions.RequestException as e: yield None
    except Exception as e: yield None

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    # active_chat_name –∏ active_chat_history —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ
    active_chat_history.append({"role": "user", "content": prompt})
    st.session_state.all_chats[active_chat_name] = active_chat_history
    save_all_chats(st.session_state.all_chats, active_chat_name)
    st.rerun() # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–ø–æ—Å–ª–µ rerun) ---
# active_chat_name –∏ active_chat_history —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ
if active_chat_history and active_chat_history[-1]["role"] == "user":
     with chat_display_container:
         with st.chat_message("assistant", avatar="ü§ñ"):
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º active_chat_history, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤ –Ω–∞—á–∞–ª–µ
             full_response = st.write_stream(stream_ai_response(current_model_id, active_chat_history))

     if full_response:
         # –ò—Å–ø–æ–ª—å–∑—É–µ–º active_chat_history, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤ –Ω–∞—á–∞–ª–µ
         active_chat_history.append({"role": "assistant", "content": full_response})
         st.session_state.all_chats[active_chat_name] = active_chat_history
         save_all_chats(st.session_state.all_chats, active_chat_name)
         # st.rerun() –Ω–µ –Ω—É–∂–µ–Ω –ø–æ—Å–ª–µ write_stream

# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
