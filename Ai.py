# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage
from duckduckgo_search import DDGS
import traceback
import re

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v13" # –ù–æ–≤—ã–π –∫–ª—é—á
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"
MAX_SEARCH_RESULTS_PER_QUERY = 4 # –ú–æ–∂–Ω–æ —á—É—Ç—å –º–µ–Ω—å—à–µ, —Ç.–∫. –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω–µ–µ
MAX_QUERIES_IN_RESPONSE = 3      # –°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–∂–∏–¥–∞–µ–º –æ—Ç –ò–ò
MAX_SNIPPET_LENGTH = 220
SEARCH_TRIGGER_TOKEN = "[SEARCH_NEEDED]"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –ß–∞—Ç –ò–ò", page_icon="ü§ñ", layout="wide", initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
custom_css = f"""
<style>
    /* ... –≤–∞—à CSS ... */
     .main .block-container {{ padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem; }}
    [data-testid="stChatMessage"] {{ background: none !important; border: none !important; box-shadow: none !important; padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important; }}
    [data-testid="stChatMessage"] > div {{ gap: 0.75rem; }}
    [data-testid="stChatMessage"] .stChatMessageContent {{ padding: 0 !important; }}
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    # ... (–∫–æ–¥ load_all_chats) ...
    data_str = localS.getItem(LOCAL_STORAGE_KEY); default_chats = {f"{DEFAULT_CHAT_NAME} 1": []}; default_name = f"{DEFAULT_CHAT_NAME} 1"
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                for name, history in data["chats"].items(): data["chats"][name] = [msg for msg in history if isinstance(msg, dict) and msg.get("role") and msg.get("content")] if isinstance(history, list) else []
                if not data["chats"]: return default_chats, default_name
                if data["active_chat"] not in data["chats"]: data["active_chat"] = list(data["chats"].keys())[0]
                return data["chats"], data["active_chat"]
        except Exception as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}.")
    return default_chats, default_name

def save_all_chats(chats_dict, active_chat_name):
    # ... (–∫–æ–¥ save_all_chats) ...
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        cleaned_chats = {}
        for name, history in chats_dict.items(): cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and msg.get("role") and msg.get("content")] if isinstance(history, list) else []
        if not cleaned_chats: active_chat_name = None
        elif active_chat_name not in cleaned_chats: active_chat_name = list(cleaned_chats.keys())[0] if cleaned_chats else None
        if active_chat_name is None and cleaned_chats: active_chat_name = list(cleaned_chats.keys())[0] # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
        data_to_save = {"chats": cleaned_chats, "active_chat": active_chat_name}
        try: localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"); return False
    return False

def generate_new_chat_name(existing_names):
    # ... (–∫–æ–¥ generate_new_chat_name) ...
    i = 1; base_name = DEFAULT_CHAT_NAME
    while f"{base_name} {i}" in existing_names: i += 1
    return f"{base_name} {i}"

# --- –ù–û–í–ê–Ø –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ò–ò (–†–µ—à–µ–Ω–∏–µ + –ó–∞–ø—Ä–æ—Å—ã –ò–õ–ò –û—Ç–≤–µ—Ç) ---
def get_ai_decision_or_response(model_id, chat_history_with_prompt):
    """–î–µ–ª–∞–µ—Ç –ù–ï–°–¢–†–ò–ú–ò–ù–ì–û–í–´–ô –≤—ã–∑–æ–≤ –ò–ò –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ –∏–ª–∏ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: st.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."); return None

    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    payload = {"model": model_id, "messages": chat_history_with_prompt, "stream": False} # stream=False

    try:
        print("–ó–∞–ø—Ä–æ—Å —Ä–µ—à–µ–Ω–∏—è/–æ—Ç–≤–µ—Ç–∞ —É –ò–ò...")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=45) # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç
        response.raise_for_status()
        data = response.json()
        full_content = data.get("choices", [{}])[0].get("message", {}).get("content", "").strip()
        print(f"  –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –ò–ò (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞): '{full_content[:150]}...'")
        return full_content
    except requests.exceptions.Timeout:
        st.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ—à–µ–Ω–∏—è —É –ò–ò."); print("–¢–∞–π–º–∞—É—Ç API (—Ä–µ—à–µ–Ω–∏–µ).")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ—à–µ–Ω–∏—è: {e}"); print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (—Ä–µ—à–µ–Ω–∏–µ): {e}")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è –æ—Ç –ò–ò: {e}"); print(f"–û—à–∏–±–∫–∞ API (—Ä–µ—à–µ–Ω–∏–µ): {e}")
        return None

# --- –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def perform_web_search(queries: list, max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY):
    # ... (–∫–æ–¥ perform_web_search) ...
    all_results_text = ""; aggregated_results = []
    if not queries: return "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞."
    print(f"–ü–æ–∏—Å–∫ –ø–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–∞–º...");
    try:
        with DDGS(timeout=25) as ddgs:
            for idx, query in enumerate(queries, 1): print(f"  –ó–∞–ø—Ä–æ—Å {idx}/{len(queries)}: '{query}'..."); search_results = list(ddgs.text(query, max_results=max_results_per_query)); aggregated_results.extend(search_results)
        if aggregated_results:
            unique_results = {res.get('body', ''): res for res in aggregated_results if res.get('body')}.values(); print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(unique_results)}")
            if unique_results:
                 all_results_text += "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n"; [all_results_text := all_results_text + f"{i}. {res.get('title', '')}: {(res.get('body', '')[:MAX_SNIPPET_LENGTH] + '...') if len(res.get('body', '')) > MAX_SNIPPET_LENGTH else res.get('body', '')}\n" for i, res in enumerate(unique_results, 1)]
            else: all_results_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        else: all_results_text = "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        return all_results_text.strip()
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}"); return "–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞."


# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞) ---
def stream_ai_response(model_id_func, chat_history_func):
    # ... (–∫–æ–¥ stream_ai_response –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try: api_key = st.secrets.get("OPENROUTER_API_KEY"); assert api_key
    except: st.error("‚õî API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon="üö®"); yield None; return
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json", "HTTP-Referer": "http://localhost:8501", "X-Title": "Streamlit Self-Deciding Chat AI"}
    if not isinstance(chat_history_func, list): yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}
    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=180)
        response.raise_for_status(); has_content = False
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]; chunk = json.loads(json_data)
                        if json_data.strip() == "[DONE]": break
                        delta = chunk.get("choices", [{}])[0].get("delta", {})
                        if delta and "content" in delta: delta_content = delta["content"]; has_content = True; yield delta_content
                    except Exception as e: print(f"–û—à–∏–±–∫–∞ —á–∞–Ω–∫–∞: {e}"); continue
        if not has_content: print("–°—Ç—Ä–∏–º–∏–Ω–≥ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}"); yield None


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if "all_chats" not in st.session_state: st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
if "selected_mode" not in st.session_state: st.session_state.selected_mode = DEFAULT_MODE

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
active_chat_name = st.session_state.active_chat

# --- –°–∞–π–¥–±–∞—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
with st.sidebar:
    # ... (–∫–æ–¥ —Å–∞–π–¥–±–∞—Ä–∞) ...
    st.markdown("## üí¨ –ß–∞—Ç—ã"); chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(active_chat_name) if active_chat_name in chat_names else (0 if chat_names else -1)
    except ValueError: active_chat_index = 0 if chat_names else -1 # –î–æ–ø. –∑–∞—â–∏—Ç–∞
    if active_chat_index != -1: selected_chat = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", options=chat_names, index=active_chat_index, label_visibility="collapsed", key="chat_selector"); assert selected_chat is not None; if selected_chat != active_chat_name: st.session_state.active_chat = selected_chat; save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    else: st.write("–ù–µ—Ç —á–∞—Ç–æ–≤.")
    st.divider()
    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"): new_name = generate_new_chat_name(list(st.session_state.all_chats.keys())); st.session_state.all_chats[new_name] = []; st.session_state.active_chat = new_name; save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    if len(chat_names) > 0 and active_chat_index != -1:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            current_chat_to_delete = st.session_state.active_chat
            if current_chat_to_delete in st.session_state.all_chats: del st.session_state.all_chats[current_chat_to_delete]; remaining_chats = list(st.session_state.all_chats.keys()); st.session_state.active_chat = remaining_chats[0] if remaining_chats else None;
            if not st.session_state.active_chat: new_name = generate_new_chat_name([]); st.session_state.all_chats = {new_name: []}; st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat); st.rerun()
    st.divider()
    mode_options = list(MODES.keys()); current_mode_index = mode_options.index(st.session_state.selected_mode) if st.session_state.selected_mode in mode_options else 0
    selected_mode_radio = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index, key="mode_selector"); assert selected_mode_radio is not None; if selected_mode_radio != st.session_state.selected_mode: st.session_state.selected_mode = selected_mode_radio; st.rerun()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –û–ë–†–ê–ë–û–¢–ö–ê ---
user_prompt_submitted = False
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    if active_chat_name in st.session_state.all_chats:
        st.session_state.all_chats[active_chat_name].append({"role": "user", "content": prompt})
        save_all_chats(st.session_state.all_chats, active_chat_name)
        user_prompt_submitted = True
        # –ù–ï rerun()
    else: st.error("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò ---
current_chat_state = st.session_state.all_chats.get(active_chat_name, [])

# –í—ã–ø–æ–ª–Ω—è–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if current_chat_state and current_chat_state[-1]["role"] == "user":

    last_user_prompt = current_chat_state[-1]["content"]
    print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞: '{last_user_prompt[:100]}...' ---")
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")

    # --- –≠—Ç–∞–ø 1: –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –ò–ò (–†–µ—à–µ–Ω–∏–µ + –ó–∞–ø—Ä–æ—Å—ã –ò–õ–ò –û—Ç–≤–µ—Ç) ---
    # –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ü–ï–†–í–û–ì–û –≤—ã–∑–æ–≤–∞
    initial_context = list(current_chat_state)
    # –î–æ–±–∞–≤–ª—è–µ–º –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    decision_system_prompt = {
        "role": "system",
        "content": f"""–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
1. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –¢–†–ï–ë–£–ï–¢ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ 2023, —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ –ø–æ–≥–æ–¥—ã/—Å—Ç–∞—Ç—É—Å–∞/–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞, –∏–ª–∏ —è–≤–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –ø–æ–∏—Å–∫–∞—Ç—å), –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û —Ç–∞–∫:
{SEARCH_TRIGGER_TOKEN}
–ó–∞–ø—Ä–æ—Å 1 –¥–ª—è –ø–æ–∏—Å–∫–∞
–ó–∞–ø—Ä–æ—Å 2 –¥–ª—è –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
–ó–∞–ø—Ä–æ—Å 3 –¥–ª—è –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

2. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ù–ï —Ç—Ä–µ–±—É–µ—Ç –ø–æ–∏—Å–∫–∞ (–æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è, –∏—Å—Ç–æ—Ä–∏—è –¥–æ 2023, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, small talk, –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞, –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–±–µ), –ø—Ä–æ—Å—Ç–æ –û–¢–í–ï–¢–¨ –Ω–∞ –Ω–µ–≥–æ –ø–æ–ª–Ω–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {SEARCH_TRIGGER_TOKEN}.

–°–µ–≥–æ–¥–Ω—è {current_date}. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∏—Å—Ç–æ—Ä–∏–∏."""
    }
    initial_context.insert(0, decision_system_prompt) # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏

    ai_initial_response = None
    with st.spinner("–î—É–º–∞—é... ü§î"): # –û–±—â–∏–π —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        ai_initial_response = get_ai_decision_or_response(current_model_id, initial_context)

    needs_search = False
    search_queries = []
    direct_answer = None
    final_response_to_save = None # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–¥–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é

    if ai_initial_response and ai_initial_response.startswith(SEARCH_TRIGGER_TOKEN):
        needs_search = True
        print(">>> –ò–ò —Ä–µ—à–∏–ª, —á—Ç–æ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫.")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        lines = ai_initial_response.split('\n')
        search_queries = [q.strip() for q in lines[1:] if q.strip()] # –ë–µ—Ä–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–æ–∫–µ–Ω–∞
        search_queries = search_queries[:MAX_QUERIES_IN_RESPONSE] # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        print(f"  –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {search_queries}")
    elif ai_initial_response:
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç
        print(">>> –ò–ò —Ä–µ—à–∏–ª –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é.")
        direct_answer = ai_initial_response
        final_response_to_save = direct_answer # –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    else:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        print(">>> –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è/–æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.")
        # –û—Ç–æ–±—Ä–∞–∑–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ get_ai_decision_or_response —á–µ—Ä–µ–∑ st.error)
        # –ù–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –±–ª–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        pass # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —á–∞—Ç–∞

    # --- –≠—Ç–∞–ø 2-4 (–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫) ---
    if needs_search:
        search_results_str = ""
        if search_queries:
            with st.spinner(f"–ò—â—É –≤ —Å–µ—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –ò–ò... üåê"):
                search_results_str = perform_web_search(search_queries)
        else:
            print("–ò–ò –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫, –Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            search_results_str = "–ò–ò –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫, –Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å—ã." # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        # –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –í–¢–û–†–û–ì–û –≤—ã–∑–æ–≤–∞ (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
        context_for_final_answer = list(current_chat_state) # –ë–µ—Ä–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é
        is_search_successful = not ("–û—à–∏–±–∫–∞" in search_results_str or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in search_results_str or "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in search_results_str)

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞
        second_system_prompt = {"role": "system"}
        if is_search_successful and search_results_str:
             second_system_prompt["content"] = (
                 f"–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è {current_date}. –ë—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ä–∞–Ω–µ–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ. "
                 f"–ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –∫–∞–∫ –û–°–ù–û–í–ù–û–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                 f"{search_results_str}\n--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---\n\n"
                 "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–∏–Ω—Ç–µ–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ë–µ–∑ —Å—Å—ã–ª–æ–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
             )
             print("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
        else:
             second_system_prompt["content"] = (
                 f"(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π –≤–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({search_results_str}). –°–µ–≥–æ–¥–Ω—è {current_date}. "
                 f"–û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–≤ –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.)"
             )
             print("–î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–∏—Å–∫–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")

        context_for_final_answer.insert(-1, second_system_prompt) # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –í—ã–ø–æ–ª–Ω—è–µ–º –í–¢–û–†–û–ô –≤—ã–∑–æ–≤ (—Å—Ç—Ä–∏–º–∏–Ω–≥)
        with st.chat_message("assistant", avatar="ü§ñ"): # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
            print("–ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞)..."); spinner_message = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–µ–±-–¥–∞–Ω–Ω—ã–µ... ‚úçÔ∏è" if is_search_successful else "–ü–æ–∏—Å–∫ –Ω–µ –ø–æ–º–æ–≥, –æ—Ç–≤–µ—á–∞—é... ü§î"
            with st.spinner(spinner_message):
                 response_generator = stream_ai_response(current_model_id, context_for_final_answer)
                 final_response_streamed = st.write_stream(response_generator)
                 final_response_to_save = final_response_streamed # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            print("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞) –ø–æ–ª—É—á–µ–Ω.")

    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω) ---
    elif direct_answer:
        with st.chat_message("assistant", avatar="ü§ñ"):
            st.markdown(direct_answer) # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        print("–ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω.")

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å) ---
    if final_response_to_save:
        if active_chat_name in st.session_state.all_chats:
             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
             if not current_chat_state or current_chat_state[-1].get("content") != final_response_to_save:
                 st.session_state.all_chats[active_chat_name].append({"role": "assistant", "content": final_response_to_save})
                 save_all_chats(st.session_state.all_chats, active_chat_name)
                 print("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
             else:
                  print("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        else: print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —á–∞—Ç –∏—Å—á–µ–∑.")
    elif not needs_search and not direct_answer:
         print("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ).")


    print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
    # –ù–ï rerun()

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞ (–≤ –∫–æ–Ω—Ü–µ) ---
chat_display_container = st.container()
with chat_display_container:
    final_display_history = list(st.session_state.all_chats.get(active_chat_name, []))
    for message in final_display_history:
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "ü§ñ" # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"], unsafe_allow_html=True)

# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
