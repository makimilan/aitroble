# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–∑–∞–≥—Ä—É–∑–∫–µ
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
from streamlit_local_storage import LocalStorage

# --- API –ö–õ–Æ–ß –ë–£–î–ï–¢ –í–ó–Ø–¢ –ò–ó –°–ï–ö–†–ï–¢–û–í STREAMLIT ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ share.streamlit.io
# –≤ —Ä–∞–∑–¥–µ–ª–µ Secrets –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞:
# OPENROUTER_API_KEY = "sk-or-v1-..."
# --------------------------------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
AVAILABLE_MODELS = {
    "DeepSeek Chat v3 (Free)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepSeek R1 (Free)": "deepseek/deepseek-r1:free",
}
LOCAL_STORAGE_KEY = "ai_chat_history" # –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
    page_icon="üí¨",
    layout="wide",
    # initial_sidebar_state —É–±—Ä–∞–Ω, —Ç.–∫. —Å–∞–π–¥–±–∞—Ä–∞ –Ω–µ—Ç
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
# –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –¥–æ –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏
localS = LocalStorage()

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS ---
# (CSS –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–º –∂–µ, —É–±—Ä–∞–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è sidebar)
custom_css = """
<style>
    .stApp { } /* –û–±—â–∏–π —Ñ–æ–Ω */

    .stChatFloatingInputContainer { /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */
        background-color: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(5px);
        border-top: 1px solid #e6e6e6;
    }
    [data-testid="stChatMessage"] { /* –°–æ–æ–±—â–µ–Ω–∏—è */
        border-radius: 15px; padding: 12px 18px; margin-bottom: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05); max-width: 90%;
    }
    [data-testid="stChatMessageContent"] p { margin-bottom: 0.5rem; }

    /* –¢–µ–º–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ */
    [data-testid="stChatMessage"] code {
        background-color: #282c34; color: #abb2bf; padding: 0.15em 0.4em;
        border-radius: 3px; font-size: 0.9em; word-wrap: break-word;
    }
    [data-testid="stChatMessage"] pre {
        background-color: #282c34; border: 1px solid #3b4048; border-radius: 5px;
        padding: 12px; overflow-x: auto; font-size: 0.9em;
    }
    [data-testid="stChatMessage"] pre code {
        background-color: transparent; color: #abb2bf; padding: 0;
        font-size: inherit; border-radius: 0;
    }
    h1 { text-align: center; padding-bottom: 10px; } /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Ä–∞–¥–∏–æ/—Å–µ–ª–µ–∫—Ç–±–æ–∫—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ */
    .stButton button { border-radius: 8px; }
    .stRadio label, .stSelectbox label { font-weight: bold; }
    /* –ö—É—Ä—Å–æ—Ä –¥–ª—è SelectBox (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) */
    [data-testid="stSelectbox"] > div { cursor: pointer; }
    /* –ö—É—Ä—Å–æ—Ä –¥–ª—è Radio */
    div[role="radiogroup"] label { cursor: pointer; }

</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")

# --- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∫–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏) ---
col1, col2 = st.columns([3, 1]) # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤

with col1:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º radio –¥–ª—è –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π, –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
    selected_model_name = st.radio(
        "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
        options=list(AVAILABLE_MODELS.keys()),
        horizontal=True, # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –æ–ø—Ü–∏–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
        key="model_selector" # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
    )
    model_id = AVAILABLE_MODELS[selected_model_name]
    st.caption(f"ID: `{model_id}`")

with col2:
    st.caption(" ") # –ü—É—Å—Ç–æ–π caption –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", type="secondary", key="clear_chat_button"):
        st.session_state.messages = [
             {"role": "assistant", "content": f"üëã –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–ø–µ—Ä—å?"}
        ]
        # –û—á–∏—â–∞–µ–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        localS.deleteItem(LOCAL_STORAGE_KEY)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º rerun –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        st.rerun()


st.divider() # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º rerun
if "history_loaded" not in st.session_state:
    st.session_state.messages = [] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    saved_history_str = localS.getItem(LOCAL_STORAGE_KEY)
    loaded_successfully = False
    if saved_history_str:
        try:
            saved_history = json.loads(saved_history_str)
            if isinstance(saved_history, list) and saved_history: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                st.session_state.messages = saved_history
                st.info("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞.", icon="üíæ")
                loaded_successfully = True
            # else: —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∏–∂–µ
        except json.JSONDecodeError:
             # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∏–∂–µ
             pass # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

    # –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å—Ç–∞–≤–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not loaded_successfully:
         st.session_state.messages = [
             {"role": "assistant", "content": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ ({selected_model_name}). –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"}
         ]
    st.session_state.history_loaded = True # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ messages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ session_state –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
if "messages" in st.session_state:
    for message in st.session_state.messages[:]:
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "ü§ñ"
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"])

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –°–¢–†–ò–ú–ò–ù–ì–ê –æ—Ç–≤–µ—Ç–∞ API OpenRouter ---
def stream_ai_response(model_id_func, chat_history_func):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É API –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Å–æ—á–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        if "OPENROUTER_API_KEY" not in st.secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.", icon="üö®")
             yield None; return

        api_key_from_secrets = st.secrets["OPENROUTER_API_KEY"]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π
        if not api_key_from_secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–∞–π–¥–µ–Ω, –Ω–æ –æ–Ω –ø—É—Å—Ç–æ–π.", icon="üö®")
             yield None; return

    except Exception as e: # –õ–æ–≤–∏–º –±–æ–ª–µ–µ –æ–±—â–∏–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º: {e}", icon="üí•")
        yield None; return

    headers = {"Authorization": f"Bearer {api_key_from_secrets}", "Content-Type": "application/json"}
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
    if not isinstance(chat_history_func, list):
         st.error("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.", icon="‚ö†Ô∏è")
         yield None; return
    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=90)
        response.raise_for_status()
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta_content = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                        if delta_content: yield delta_content
                    except json.JSONDecodeError:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
                        continue
                    except Exception as e:
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤
                        st.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞.", icon="‚ö†Ô∏è"); break
    except requests.exceptions.Timeout:
        st.error("‚è≥ –¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.", icon="‚è±Ô∏è"); yield None
    except requests.exceptions.RequestException as e:
        error_message = f"–û—à–∏–±–∫–∞ API: {e}"
        try: # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
             if e.response is not None: error_message += f" ({e.response.text[:100]})" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        except: pass
        st.error(error_message, icon="üåê"); yield None
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}", icon="üí•"); yield None

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å...", key="chat_input"):

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ messages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
    if "messages" not in st.session_state or not isinstance(st.session_state.messages, list):
        st.session_state.messages = [] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

    # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –°–û–•–†–ê–ù–Ø–ï–ú –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user", "content": prompt})
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localS.setItem(LOCAL_STORAGE_KEY, json.dumps(st.session_state.messages))
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}", icon="üíæ")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.chat_message("user", avatar="üßë‚Äçüíª"):
        st.markdown(prompt)

    # 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    with st.chat_message("assistant", avatar="ü§ñ"):
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        current_chat_history = st.session_state.get("messages", [])
        full_response = st.write_stream(stream_ai_response(model_id, current_chat_history))

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç –ò–ò –∏ –°–ù–û–í–ê –°–û–•–†–ê–ù–Ø–ï–ú –∏—Å—Ç–æ—Ä–∏—é
    if full_response:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ messages –≤—Å–µ –µ—â–µ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        if isinstance(st.session_state.messages, list):
             st.session_state.messages.append({"role": "assistant", "content": full_response})
             try:
                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                 localS.setItem(LOCAL_STORAGE_KEY, json.dumps(st.session_state.messages))
             except Exception as e:
                  st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}", icon="üíæ")
        else:
             # –ï—Å–ª–∏ messages –ø–µ—Ä–µ—Å—Ç–∞–ª –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, —ç—Ç–æ –æ—à–∏–±–∫–∞, –Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
             st.session_state.messages = [{"role": "assistant", "content": full_response}]
             st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞. –ò—Å—Ç–æ—Ä–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π.", icon="‚ö†Ô∏è")


    # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º rerun() –∑–¥–µ—Å—å —è–≤–Ω–æ. Streamlit –æ–±–Ω–æ–≤–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
