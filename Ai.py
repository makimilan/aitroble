# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage
from duckduckgo_search import DDGS # <--- –ò–º–ø–æ—Ä—Ç –¥–ª—è DuckDuckGo
import traceback # <--- –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ–∏—Å–∫–∞

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç OPENROUTER_API_KEY –¥–æ–±–∞–≤–ª–µ–Ω –≤ Streamlit Cloud
# -----------------------------

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v8" # –ù–æ–≤—ã–π –∫–ª—é—á
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"
MAX_SEARCH_RESULTS = 3 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ß–∞—Ç –ò–ò —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º", # –ò–∑–º–µ–Ω–µ–Ω–æ
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
localS = LocalStorage()

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞ ---
custom_css = f"""
<style>
    /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
     .main .block-container {{
        padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem;
    }}
    /* –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω –∏ –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã —É —Å–æ–æ–±—â–µ–Ω–∏–π */
    [data-testid="stChatMessage"] {{
        background: none !important; border: none !important; box-shadow: none !important;
        padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important;
    }}
     /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏ —Ç–µ–∫—Å—Ç–∞ */
     [data-testid="stChatMessage"] > div {{
        gap: 0.75rem;
     }}
     /* –£–±–∏—Ä–∞–µ–º padding —É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */
     [data-testid="stChatMessage"] .stChatMessageContent {{
         padding: 0 !important;
    }}
     /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ */
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ) */
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞–¥–∏–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ */
     [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}

</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_all_chats():
    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                return data["chats"], data["active_chat"]
        except json.JSONDecodeError: pass
    first_chat_name = f"{DEFAULT_CHAT_NAME} 1"
    default_chats = {first_chat_name: []}
    return default_chats, first_chat_name

def save_all_chats(chats_dict, active_chat_name):
    if isinstance(chats_dict, dict) and isinstance(active_chat_name, str):
        data_to_save = {"chats": chats_dict, "active_chat": active_chat_name}
        try:
            localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save)); return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}") # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
            return False
    return False

def generate_new_chat_name(existing_names):
    i = 1
    while f"{DEFAULT_CHAT_NAME} {i}" in existing_names: i += 1
    return f"{DEFAULT_CHAT_NAME} {i}"

# --- –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---
def perform_web_search(query, max_results=MAX_SEARCH_RESULTS):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é DuckDuckGo –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    results_text = ""
    st.write(f"_–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –≤ —Å–µ—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"{query[:50]}...\"_") # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞
    search_results = []
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è DDGS
        with DDGS(timeout=10) as ddgs: # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–∞–π–º–∞—É—Ç
             search_results = list(ddgs.text(query, max_results=max_results))

        if search_results:
            results_text += "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n"
            for i, result in enumerate(search_results, 1):
                title = result.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                body = result.get('body', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                href = result.get('href', '#')
                # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                body_short = (body[:180] + '...') if len(body) > 180 else body
                results_text += f"{i}. [{title}]({href}): {body_short}\n" # –î–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫—É
            results_text += "--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ ---"
        else:
             results_text = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ—Ç–∏."

        return results_text.strip()

    except Exception as e:
        # st.error(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}") # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}") # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        # traceback.print_exc() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏."

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "all_chats" not in st.session_state:
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    if st.session_state.active_chat not in st.session_state.all_chats:
        if st.session_state.all_chats:
            st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]
        else: # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç
            new_name = generate_new_chat_name([])
            st.session_state.all_chats = {new_name: []}
            st.session_state.active_chat = new_name
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat)

if "selected_mode" not in st.session_state:
    st.session_state.selected_mode = DEFAULT_MODE

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ ---
active_chat_name = st.session_state.active_chat
# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
active_chat_history = list(st.session_state.all_chats.get(active_chat_name, []))

# --- –°–∞–π–¥–±–∞—Ä: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ –∏ —Ä–µ–∂–∏–º–æ–º ---
with st.sidebar:
    st.markdown("## üí¨ –ß–∞—Ç—ã")
    chat_names = list(st.session_state.all_chats.keys())
    try: active_chat_index = chat_names.index(active_chat_name)
    except ValueError: active_chat_index = 0

    selected_chat = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", options=chat_names, index=active_chat_index,
        label_visibility="collapsed", key="chat_selector"
    )

    if selected_chat != active_chat_name:
        st.session_state.active_chat = selected_chat
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    st.divider()

    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"):
        new_name = generate_new_chat_name(chat_names)
        st.session_state.all_chats[new_name] = []
        st.session_state.active_chat = new_name
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
        st.rerun()

    if len(chat_names) > 0:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            if active_chat_name in st.session_state.all_chats:
                del st.session_state.all_chats[active_chat_name]
                remaining_chats = list(st.session_state.all_chats.keys())
                if remaining_chats: st.session_state.active_chat = remaining_chats[0]
                else:
                    new_name = generate_new_chat_name([])
                    st.session_state.all_chats = {new_name: []}
                    st.session_state.active_chat = new_name
                save_all_chats(st.session_state.all_chats, st.session_state.active_chat)
                st.rerun()

    st.divider()

    mode_options = list(MODES.keys())
    try: current_mode_index = mode_options.index(st.session_state.selected_mode)
    except ValueError: current_mode_index = 0

    selected_mode_radio = st.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", options=mode_options, index=current_mode_index,
        key="mode_selector"
    )
    if selected_mode_radio != st.session_state.selected_mode:
        st.session_state.selected_mode = selected_mode_radio
        st.rerun()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç
if not active_chat_history:
     welcome_message = {"role": "assistant", "content": f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø {current_mode_name} —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–µ–±-–ø–æ–∏—Å–∫—É. –ù–∞—á–Ω–µ–º –Ω–æ–≤—ã–π —á–∞—Ç!"}
     st.session_state.all_chats[active_chat_name] = [welcome_message] # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å
     save_all_chats(st.session_state.all_chats, active_chat_name)
     active_chat_history = [welcome_message] # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
chat_display_container = st.container()
with chat_display_container:
    for message in active_chat_history: # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –∏—Å—Ç–æ—Ä–∏–∏
        avatar = "üßë‚Äçüíª" if message["role"] == "user" else "ü§ñ"
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"], unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def stream_ai_response(model_id_func, chat_history_func):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ API
        api_key_from_secrets = st.secrets.get("OPENROUTER_API_KEY")
        if not api_key_from_secrets:
             st.error("‚õî –°–µ–∫—Ä–µ—Ç 'OPENROUTER_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π.", icon="üö®")
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º yield –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
             yield None
             return # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    except Exception as e:
        st.error(f"ü§Ø –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º: {e}", icon="üí•")
        yield None
        return

    headers = {"Authorization": f"Bearer {api_key_from_secrets}", "Content-Type": "application/json"}
    if not isinstance(chat_history_func, list):
        print("–û—à–∏–±–∫–∞: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.")
        yield None
        return

    # –î–æ–±–∞–≤–ª—è–µ–º HTTP Referer –∏ X-Title (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ OpenRouter)
    headers.update({
        "HTTP-Referer": "http://localhost:8501", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
        "X-Title": "Streamlit Chat AI" # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    })

    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=120) # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        has_content = False
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data = decoded_line[len("data: "):]
                        if json_data.strip() == "[DONE]": break
                        chunk = json.loads(json_data)
                        delta_content = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                        if delta_content:
                            has_content = True
                            yield delta_content
                    except json.JSONDecodeError:
                        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {decoded_line}")
                        continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—É—é —Å—Ç—Ä–æ–∫—É
                    except Exception as e_json:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e_json}")
                        continue

        # –ï—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ [DONE])
        if not has_content:
             print("–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
             # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
             # yield ""


    except requests.exceptions.Timeout:
        st.error("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.", icon="‚è±Ô∏è")
        print("–û—à–∏–±–∫–∞: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API.")
        yield None
    except requests.exceptions.RequestException as e:
        st.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {e}", icon="üíî")
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        yield None
    except Exception as e:
        st.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}", icon="üî•")
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}")
        # traceback.print_exc() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        yield None


# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ session_state
    st.session_state.all_chats[active_chat_name].append({"role": "user", "content": prompt})
    save_all_chats(st.session_state.all_chats, active_chat_name)
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.rerun()

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–ø–æ—Å–ª–µ rerun, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º active_chat_history, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –∫–æ–ø–∏–µ–π –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ —Å–∫—Ä–∏–ø—Ç–∞
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ* –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_chat_state = st.session_state.all_chats.get(active_chat_name, [])
if current_chat_state and current_chat_state[-1]["role"] == "user":

    last_user_prompt = current_chat_state[-1]["content"]

    # --- –í–µ–±-–ø–æ–∏—Å–∫ ---
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
    # –≠—Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è st.rerun() –∏ –ª–æ–≥–∏–∫–µ –Ω–∏–∂–µ
    search_results_str = perform_web_search(last_user_prompt)

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ò–ò ---
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¢–ï–ö–£–©–ï–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ò–ò
    context_for_ai = list(current_chat_state)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–ï–†–ï–î –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if search_results_str and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in search_results_str and "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" not in search_results_str:
        search_context_message = {
            "role": "system",
            "content": (
                f"{search_results_str}\n\n"
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –í—ã—à–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                "–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ï–°–õ–ò –û–ù–ê –†–ï–õ–ï–í–ê–ù–¢–ù–ê –ò –ü–û–õ–ï–ó–ù–ê, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. "
                "–ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –∏–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π –∏—Ö. "
                "–û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            )
        }
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context_for_ai.insert(-1, search_context_message)
    elif search_results_str: # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
         search_context_message = {
            "role": "system",
             "content": f"({search_results_str}) –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
         }
         context_for_ai.insert(-1, search_context_message)


    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ
    with chat_display_container:
        with st.chat_message("assistant", avatar="ü§ñ"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            response_generator = stream_ai_response(current_model_id, context_for_ai)
            full_response = st.write_stream(response_generator)

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ None (–≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
    if full_response:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é –≤ session_state
        st.session_state.all_chats[active_chat_name].append({"role": "assistant", "content": full_response})
        save_all_chats(st.session_state.all_chats, active_chat_name)
        # st.rerun() –∑–¥–µ—Å—å –ù–ï –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ write_stream —É–∂–µ –æ–±–Ω–æ–≤–∏–ª –≤—ã–≤–æ–¥

    # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–∏–∑-–∑–∞ –æ—à–∏–±–∫–∏), rerun –Ω–µ –¥–µ–ª–∞–µ–º,
    # –æ—à–∏–±–∫–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ã —á–µ—Ä–µ–∑ st.error –≤ stream_ai_response

# --- –§—É—Ç–µ—Ä ---
# –£–±—Ä–∞–Ω
