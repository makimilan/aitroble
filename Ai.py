# -*- coding: utf-8 -*-
import streamlit as st
import requests
import os
import platform
import json
import datetime
from streamlit_local_storage import LocalStorage
from duckduckgo_search import DDGS
import traceback
import re
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ö–ª—é—á API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
OPENROUTER_API_KEY = st.secrets.get("OPENROUTER_API_KEY")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)": "deepseek/deepseek-chat-v3-0324:free",
    "DeepThink (R1)": "deepseek/deepseek-r1:free",
}
DEFAULT_MODE = "–°—Ç–∞–Ω–¥–∞—Ä—Ç (V3)"
LOCAL_STORAGE_KEY = "multi_chat_storage_v14"
DEFAULT_CHAT_NAME = "–ù–æ–≤—ã–π —á–∞—Ç"
MAX_SEARCH_RESULTS_PER_QUERY = 5
MAX_QUERIES_TO_GENERATE = 3
MAX_SNIPPET_LENGTH = 250
REQUEST_TIMEOUT = 30 # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
STREAM_TIMEOUT = 180 # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ß–∞—Ç –ò–ò —Å –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º –ü–æ–∏—Å–∫–∞", page_icon="üí°", layout="wide", initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalStorage ---
try:
    localS = LocalStorage()
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LocalStorage: {e}")
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.", icon="üö®")
    localS = None # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ None, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS ---
custom_css = f"""
<style>
     .main .block-container {{ padding-top: 1rem; padding-bottom: 4rem; padding-left: 1rem; padding-right: 1rem; }}
    [data-testid="stChatMessage"] {{ background: none !important; border: none !important; box-shadow: none !important; padding: 0.1rem 0 !important; margin-bottom: 0.75rem !important; }}
    [data-testid="stChatMessage"] > div {{ gap: 0.75rem; }}
    [data-testid="stChatMessage"] .stChatMessageContent {{ padding: 0 !important; }}
    [data-testid="stChatMessage"] .stChatMessageContent p {{ margin-bottom: 0.2rem; }}
    [data-testid="stSidebar"] {{ padding: 1rem; }}
    [data-testid="stSidebar"] h2 {{ text-align: center; margin-bottom: 1rem; font-size: 1.4rem; }}
    [data-testid="stSidebar"] .stButton button {{ width: 100%; margin-bottom: 0.5rem; border-radius: 5px; }}
    [data-testid="stSidebar"] .stRadio [data-testid="stWidgetLabel"] {{ font-size: 0.9rem; margin-bottom: 0.3rem; font-weight: bold; }}
    [data-testid="stSidebar"] [data-testid="stToggle"] label {{ font-size: 0.95rem; font-weight: bold; }}
    /* –°—Ç–∏–ª–∏ –¥–ª—è st.status */
    [data-testid="stStatusWidget"] div[role="status"] {{ text-align: center; }}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ ---
if not OPENROUTER_API_KEY:
    st.error("‚õî –ö–ª—é—á API OpenRouter (`OPENROUTER_API_KEY`) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ.", icon="üö®")
    logging.error("–ö–ª—é—á API OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ ---
def load_all_chats():
    default_chats = {f"{DEFAULT_CHAT_NAME} 1": []}
    default_name = f"{DEFAULT_CHAT_NAME} 1"
    initial_search_state = False

    if not localS: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ localS
        logging.warning("LocalStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        st.session_state.web_search_enabled = initial_search_state
        return default_chats, default_name

    data_str = localS.getItem(LOCAL_STORAGE_KEY)
    if data_str:
        try:
            data = json.loads(data_str)
            if isinstance(data, dict) and "chats" in data and "active_chat" in data and isinstance(data["chats"], dict):
                cleaned_chats = {}
                for name, history in data["chats"].items():
                    if isinstance(history, list):
                        cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and msg.get("role") and msg.get("content")]
                    else:
                        cleaned_chats[name] = []

                if not cleaned_chats:
                    logging.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—É—Å—Ç—ã–µ —á–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                    st.session_state.web_search_enabled = initial_search_state
                    return default_chats, default_name

                active_chat = data["active_chat"]
                if active_chat not in cleaned_chats:
                    active_chat = list(cleaned_chats.keys())[0]
                    logging.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{data['active_chat']}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π: '{active_chat}'.")

                st.session_state.web_search_enabled = data.get("web_search_enabled", initial_search_state)
                logging.info(f"–ß–∞—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ ({st.session_state.web_search_enabled=}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                return cleaned_chats, active_chat
            else:
                logging.warning("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ LocalStorage –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        except json.JSONDecodeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ LocalStorage: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    else:
        logging.info("–î–∞–Ω–Ω—ã–µ –≤ LocalStorage –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

    st.session_state.web_search_enabled = initial_search_state
    return default_chats, default_name

def save_all_chats(chats_dict, active_chat_name, web_search_state):
    if not localS:
        logging.warning("LocalStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return False
    if not isinstance(chats_dict, dict):
        logging.error("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Ç–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict).")
        return False
    if not isinstance(active_chat_name, str) and active_chat_name is not None:
         logging.error("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")
         return False

    cleaned_chats = {}
    for name, history in chats_dict.items():
        if isinstance(history, list):
            cleaned_chats[name] = [msg for msg in history if isinstance(msg, dict) and msg.get("role") and msg.get("content")]
        else:
            cleaned_chats[name] = []

    if not cleaned_chats:
        active_chat_name = None
    elif active_chat_name not in cleaned_chats:
        active_chat_name = list(cleaned_chats.keys())[0] if cleaned_chats else None
        logging.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π: {active_chat_name}")

    data_to_save = {
        "chats": cleaned_chats,
        "active_chat": active_chat_name,
        "web_search_enabled": web_search_state
    }
    try:
        localS.setItem(LOCAL_STORAGE_KEY, json.dumps(data_to_save))
        logging.info(f"–ß–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã–π: {active_chat_name}, –ü–æ–∏—Å–∫: {web_search_state}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤ –≤ LocalStorage: {e}")
        st.toast("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞!", icon="üö®")
        return False

def generate_new_chat_name(existing_names):
    i = 1
    base_name = DEFAULT_CHAT_NAME
    while f"{base_name} {i}" in existing_names:
        i += 1
    return f"{base_name} {i}"

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
def generate_search_queries(user_prompt, model_id):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "http://localhost:8501", # –ò–ª–∏ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL
        "X-Title": "Streamlit Toggle Search Chat AI"
    }
    generation_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–æ {MAX_QUERIES_TO_GENERATE} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–µ –Ω—É–º–µ—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã.

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"{user_prompt}"

–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:"""
    payload = {
        "model": model_id,
        "messages": [{"role": "user", "content": generation_prompt}],
        "max_tokens": 100,
        "temperature": 0.3
    }
    generated_queries = []
    try:
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è: '{user_prompt[:50]}...'")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()
        raw_queries = data.get("choices", [{}])[0].get("message", {}).get("content", "")

        if raw_queries:
            queries = [re.sub(r"^\s*[\d\.\-\*]+\s*", "", q.strip()) for q in raw_queries.split('\n') if q.strip()]
            generated_queries = [q for q in queries if q]
            logging.info(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {generated_queries}")
        else:
            logging.warning("  API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")

    except requests.exceptions.Timeout:
        logging.error("  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenRouter.")
        st.toast("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.", icon="‚è±Ô∏è")
    except requests.exceptions.RequestException as e:
        logging.error(f"  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        st.toast(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}", icon="üö®")
    except Exception as e:
        logging.error(f"  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}", exc_info=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ exc_info
        st.toast("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.", icon="‚ùì")

    return generated_queries[:MAX_QUERIES_TO_GENERATE]

# --- –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---
def perform_web_search(queries: list, max_results_per_query=MAX_SEARCH_RESULTS_PER_QUERY):
    all_results_text = ""
    aggregated_results = []
    if not queries:
        logging.warning("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞.")
        return "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞."

    logging.info(f"–ù–∞—á–∏–Ω–∞—é –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–∞–º...")
    try:
        with DDGS(timeout=REQUEST_TIMEOUT) as ddgs:
            for idx, query in enumerate(queries, 1):
                logging.info(f"  –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å {idx}/{len(queries)}: '{query}'...")
                try:
                    search_results = list(ddgs.text(query, max_results=max_results_per_query))
                    aggregated_results.extend(search_results)
                    logging.info(f"    –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'.")
                except Exception as e:
                    logging.error(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {e}")
                    st.toast(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}", icon="üï∏Ô∏è")

        if aggregated_results:
            unique_results_dict = {}
            for res in aggregated_results:
                body = res.get('body')
                if body and body not in unique_results_dict:
                    unique_results_dict[body] = res

            unique_results = list(unique_results_dict.values())
            logging.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(unique_results)}")

            if unique_results:
                result_lines = []
                for i, res in enumerate(unique_results, 1):
                    title = res.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                    body = res.get('body', '')
                    snippet = (body[:MAX_SNIPPET_LENGTH] + '...') if len(body) > MAX_SNIPPET_LENGTH else body
                    result_lines.append(f"{i}. {title}: {snippet}")
                all_results_text = "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ ---\n" + "\n".join(result_lines)
            else:
                all_results_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."
                logging.info(all_results_text)
        else:
            all_results_text = "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            logging.info(all_results_text)

        return all_results_text.strip()

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}", exc_info=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ exc_info
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}", icon="üï∏Ô∏è")
        return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}"

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ ---
def stream_ai_response(model_id_func, chat_history_func):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "http://localhost:8501", # –ò–ª–∏ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL
        "X-Title": "Streamlit Toggle Search Chat AI"
    }
    if not isinstance(chat_history_func, list):
        logging.error("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        yield None
        return

    payload = {"model": model_id_func, "messages": chat_history_func, "stream": True}
    stream_successful = False
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∫ –º–æ–¥–µ–ª–∏: {model_id_func}")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, stream=True, timeout=STREAM_TIMEOUT)
        response.raise_for_status()
        logging.info("–°—Ç—Ä–∏–º–∏–Ω–≥ –Ω–∞—á–∞—Ç —É—Å–ø–µ—à–Ω–æ.")

        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith("data: "):
                    try:
                        json_data_str = decoded_line[len("data: "):].strip()
                        if json_data_str == "[DONE]":
                            logging.info("–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–º [DONE].")
                            break
                        if json_data_str:
                           chunk = json.loads(json_data_str)
                           delta = chunk.get("choices", [{}])[0].get("delta", {})
                           if delta and "content" in delta:
                               delta_content = delta["content"]
                               stream_successful = True
                               yield delta_content
                    except json.JSONDecodeError as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON —á–∞–Ω–∫–∞: {e}. –°—Ç—Ä–æ–∫–∞: '{json_data_str}'")
                        continue
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ —Å—Ç—Ä–∏–º–∞: {e}")
                        continue
        if not stream_successful:
             logging.warning("–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

    except requests.exceptions.Timeout:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: –¢–∞–π–º–∞—É—Ç ({STREAM_TIMEOUT}s) —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenRouter.")
        st.error(f"–¢–∞–π–º–∞—É—Ç ({STREAM_TIMEOUT} —Å–µ–∫) –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.", icon="‚è±Ô∏è")
        yield None
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}")
        st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò: {e}", icon="üö®")
        yield None
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}", exc_info=True)
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.", icon="‚ùì")
        yield None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "all_chats" not in st.session_state:
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
    st.session_state.all_chats, st.session_state.active_chat = load_all_chats()
if "selected_mode" not in st.session_state:
    st.session_state.selected_mode = DEFAULT_MODE
if "web_search_enabled" not in st.session_state:
     st.session_state.web_search_enabled = False
     logging.warning("–°–æ—Å—Ç–æ—è–Ω–∏–µ web_search_enabled –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ False.")

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ---
if st.session_state.active_chat not in st.session_state.all_chats:
    logging.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{st.session_state.active_chat}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤.")
    if st.session_state.all_chats:
        st.session_state.active_chat = list(st.session_state.all_chats.keys())[0]
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç: '{st.session_state.active_chat}'")
    else:
        new_name = generate_new_chat_name([])
        st.session_state.all_chats = {new_name: []}
        st.session_state.active_chat = new_name
        logging.info(f"–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: '{new_name}'")
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)

active_chat_name = st.session_state.active_chat

# --- –°–∞–π–¥–±–∞—Ä ---
with st.sidebar:
    st.markdown("## üí¨ –ß–∞—Ç—ã")
    chat_names = list(st.session_state.all_chats.keys())

    if chat_names:
        try:
            active_chat_index = chat_names.index(active_chat_name)
        except ValueError:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: active_chat_name '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ chat_names.")
            active_chat_index = 0

        selected_chat = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
            options=chat_names,
            index=active_chat_index,
            label_visibility="collapsed",
            key="chat_selector"
            )

        if selected_chat is not None and selected_chat != active_chat_name:
            st.session_state.active_chat = selected_chat
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —á–∞—Ç: {selected_chat}")
            save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
            st.rerun()
    else:
        st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.")

    st.divider()

    if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", key="new_chat_button"):
        new_name = generate_new_chat_name(list(st.session_state.all_chats.keys()))
        st.session_state.all_chats[new_name] = []
        st.session_state.active_chat = new_name
        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {new_name}")
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
        st.rerun()

    if chat_names:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", type="secondary", key="delete_chat_button"):
            current_chat_to_delete = st.session_state.active_chat
            logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞: {current_chat_to_delete}")
            if current_chat_to_delete in st.session_state.all_chats:
                del st.session_state.all_chats[current_chat_to_delete]
                logging.info(f"–ß–∞—Ç '{current_chat_to_delete}' —É–¥–∞–ª–µ–Ω.")
                remaining_chats = list(st.session_state.all_chats.keys())
                if remaining_chats:
                    st.session_state.active_chat = remaining_chats[0]
                else:
                    new_name = generate_new_chat_name([])
                    st.session_state.all_chats = {new_name: []}
                    st.session_state.active_chat = new_name
                    logging.info("–£–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
                save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
                st.rerun()
            else:
                 logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: {current_chat_to_delete}")

    st.divider()

    search_toggled = st.toggle(
        "üåê –í–µ–±-–ø–æ–∏—Å–∫",
        value=st.session_state.web_search_enabled,
        key="web_search_toggle"
        )
    if search_toggled != st.session_state.web_search_enabled:
        st.session_state.web_search_enabled = search_toggled
        logging.info(f"–í–µ–±-–ø–æ–∏—Å–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {search_toggled}")
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
        # –ù–µ –Ω—É–∂–µ–Ω rerun

    st.divider()

    mode_options = list(MODES.keys())
    try:
        current_mode_index = mode_options.index(st.session_state.selected_mode)
    except ValueError:
        logging.warning(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º '{st.session_state.selected_mode}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        st.session_state.selected_mode = DEFAULT_MODE
        current_mode_index = 0

    selected_mode_radio = st.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        options=mode_options,
        index=current_mode_index,
        key="mode_selector"
        )
    if selected_mode_radio is not None and selected_mode_radio != st.session_state.selected_mode:
        st.session_state.selected_mode = selected_mode_radio
        logging.info(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {selected_mode_radio}")
        # –ù–µ –Ω—É–∂–µ–Ω rerun

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –ß–∞—Ç ---
current_mode_name = st.session_state.get("selected_mode", DEFAULT_MODE)
current_model_id = MODES.get(current_mode_name, MODES[DEFAULT_MODE])

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
chat_display_container = st.container()
with chat_display_container:
    if active_chat_name in st.session_state.all_chats:
        current_display_history = st.session_state.all_chats[active_chat_name]
        for message in current_display_history:
            avatar = "üßë‚Äçüíª" if message["role"] == "user" else "üí°"
            with st.chat_message(message["role"], avatar=avatar):
                st.markdown(message["content"], unsafe_allow_html=True)
    else:
        st.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞: {active_chat_name}")

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if prompt := st.chat_input(f"–°–ø—Ä–æ—Å–∏ {current_mode_name}..."):
    if active_chat_name in st.session_state.all_chats:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ '{active_chat_name}'.")
        st.session_state.all_chats[active_chat_name].append({"role": "user", "content": prompt})
        save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
        st.rerun()
    else:
        st.error("–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", icon="‚ùå")
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç '{active_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò ---
if active_chat_name in st.session_state.all_chats:
    current_chat_state = st.session_state.all_chats[active_chat_name]

    if current_chat_state and current_chat_state[-1]["role"] == "user":

        last_user_prompt = current_chat_state[-1]["content"]
        logging.info(f"\n--- –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è —á–∞—Ç–∞ '{active_chat_name}' ---")
        logging.info(f"–ü—Ä–æ–º–ø—Ç: '{last_user_prompt[:100]}...' | –ü–æ–∏—Å–∫: {'–í–ö–õ' if st.session_state.web_search_enabled else '–í–´–ö–õ'}")

        current_date = datetime.datetime.now().strftime("%Y-%m-%d")
        search_results_str = ""
        search_performed_successfully = False
        context_for_ai = list(current_chat_state)
        needs_search = st.session_state.web_search_enabled

        # --- –≠—Ç–∞–ø—ã –ø–æ–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ needs_search == True) ---
        if needs_search:
            logging.info(">>> –í–µ–±-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω.")
            generated_queries = []
            search_results_str = "–ü–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è."

            # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            try:
                with st.spinner("–ü–æ–¥–±–∏—Ä–∞—é –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã... üßê"):
                    generated_queries = generate_search_queries(last_user_prompt, current_model_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ generate_search_queries: {e}", exc_info=True)
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.", icon="‚ùì")

            # 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            queries_to_search = generated_queries if generated_queries else [last_user_prompt]
            if not generated_queries:
                 logging.warning("–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")

            try:
                spinner_text = f"–ò—â—É –≤ —Å–µ—Ç–∏ –ø–æ {len(queries_to_search)} –∑–∞–ø—Ä–æ—Å–∞–º... üåê" if generated_queries else "–ò—â—É –≤ —Å–µ—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É... üåê"
                with st.spinner(spinner_text):
                     search_results_str = perform_web_search(queries_to_search)
                if search_results_str and not any(err_msg in search_results_str for err_msg in ["–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞", "–Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö"]):
                     search_performed_successfully = True
                     logging.info("–í–µ–±-–ø–æ–∏—Å–∫ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
                else:
                     logging.warning(f"–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: '{search_results_str}'")

            except Exception as e:
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ perform_web_search: {e}", exc_info=True)
                 st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–µ–±-–ø–æ–∏—Å–∫–∞.", icon="üï∏Ô∏è")
                 search_results_str = f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}"

            # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            system_prompt = {"role": "system"}
            if search_performed_successfully:
                 system_prompt["content"] = f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –±—ã–ª –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û. –ò—Å–ø–æ–ª—å–∑—É–π –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –ù–ò–ñ–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ –∫–∞–∫ –û–°–ù–û–í–ù–û–ô –ò–°–¢–û–ß–ù–ò–ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ —Å–∞–º —Ñ–∞–∫—Ç –ø–æ–∏—Å–∫–∞, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ù–µ –≤–∫–ª—é—á–∞–π URL –∏–ª–∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –æ—Ç–≤–µ—Ç.\n\n{search_results_str}\n\n--- –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ ---\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                 logging.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.")
            else:
                 system_prompt["content"] = f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –±—ã–ª –í–ö–õ–Æ–ß–ï–ù, –Ω–æ –Ω–µ –¥–∞–ª –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: '{search_results_str}'). –û—Ç–≤–µ—á–∞–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö. –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."
                 logging.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")
            context_for_ai.insert(-1, system_prompt)

        else: # needs_search == False
            logging.info(">>> –í–µ–±-–ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω.")
            system_prompt = {"role": "system", "content": f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}. –í–µ–±-–ø–æ–∏—Å–∫ –í–´–ö–õ–Æ–ß–ï–ù. –û—Ç–≤–µ—á–∞–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö."}
            context_for_ai.insert(-1, system_prompt)
            logging.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∏—Å–∫–µ.")


        # === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö: –°–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –ò–ò ===
        final_response_to_save = None
        ai_response_error = False
        full_response_chunks = []

        spinner_message = "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
        if needs_search:
            spinner_message = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–µ–±-–¥–∞–Ω–Ω—ã–µ..." if search_performed_successfully else "–ü–æ–∏—Å–∫ –Ω–µ –ø–æ–º–æ–≥, –æ—Ç–≤–µ—á–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–Ω–∏–π..."

        logging.info("–ó–∞–ø—Ä–æ—Å –∏ —Å–±–æ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.status –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–µ–∑ chat_message
            with st.status(spinner_message, expanded=True) as status: # expanded=True —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–∏–¥–µ—Ç—å —Ç–µ–∫—Å—Ç
                response_generator = stream_ai_response(current_model_id, context_for_ai)
                for chunk in response_generator:
                    if chunk is None: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –æ–± –æ—à–∏–±–∫–µ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
                        logging.error("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (None).")
                        ai_response_error = True
                        status.update(label="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞!", state="error", expanded=True)
                        break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤
                    if chunk:
                        full_response_chunks.append(chunk)
                        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∑–¥–µ—Å—å

                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                if not ai_response_error:
                    final_response_to_save = "".join(full_response_chunks)
                    if final_response_to_save:
                        logging.info("–û—Ç–≤–µ—Ç –æ—Ç –ò–ò —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω.")
                        status.update(label="–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!", state="complete", expanded=False) # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
                    else:
                        # –°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç
                        logging.warning("–û—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø—É—Å—Ç –ø–æ—Å–ª–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞.")
                        status.update(label="–ò–ò –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç.", state="warning", expanded=True)
                        final_response_to_save = None # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, —Å—Ç–∞—Ç—É—Å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ error

        except Exception as e:
             # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–æ –ø—Ä–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
             logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç—Ä–∏–º–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}", exc_info=True)
             st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}", icon="üí•")
             final_response_to_save = None
             ai_response_error = True
             # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
             if 'status' in locals() and status:
                 try:
                    status.update(label=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", state="error", expanded=True)
                 except Exception: # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    pass


        # === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ü–û–°–õ–ï —Å–±–æ—Ä–∞) ===

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¢–û–õ–¨–ö–û –ï–°–õ–ò –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω
        if final_response_to_save and not ai_response_error:
            logging.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
            try:
                # –°–æ–∑–¥–∞–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –ü–û–õ–ù–´–ú –æ—Ç–≤–µ—Ç–æ–º
                with st.chat_message("assistant", avatar="üí°"):
                    st.markdown(final_response_to_save, unsafe_allow_html=True) # –î–æ–±–∞–≤–∏–ª unsafe_allow_html –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ò–ò –≤–µ—Ä–Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                logging.info("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω.")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω
                if active_chat_name in st.session_state.all_chats:
                     current_history_for_save = st.session_state.all_chats[active_chat_name]
                     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                     if not current_history_for_save or current_history_for_save[-1].get("role") != "assistant" or current_history_for_save[-1].get("content") != final_response_to_save:
                          current_history_for_save.append({"role": "assistant", "content": final_response_to_save})
                          save_all_chats(st.session_state.all_chats, st.session_state.active_chat, st.session_state.web_search_enabled)
                          logging.info("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                     else:
                          logging.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                else:
                     logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: —á–∞—Ç '{active_chat_name}' –∏—Å—á–µ–∑.")

            except Exception as render_error:
                 # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è markdown
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è markdown: {render_error}", exc_info=True)
                 st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {render_error}", icon="üñºÔ∏è")
                 # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        elif ai_response_error:
             logging.info("–û—Ç–≤–µ—Ç –ò–ò –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
             # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–æ —á–µ—Ä–µ–∑ st.error –∏–ª–∏ status.update

        else: # –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –Ω–æ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
             logging.info("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
             # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–æ —á–µ—Ä–µ–∑ status.update

        logging.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è —á–∞—Ç–∞ '{active_chat_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        # –ù–µ –Ω—É–∂–µ–Ω rerun –∑–¥–µ—Å—å
